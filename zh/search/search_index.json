{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 agnflow","text":"<p>agnflow \u662f\u4e00\u4e2a\u7b80\u6d01\u7684 Python \u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u5f15\u64ce\uff0c\u652f\u6301\u540c\u6b65\u4e0e\u5f02\u6b65\u8282\u70b9\u3001\u5206\u652f\u3001\u5faa\u73af\u3001\u6d41\u7a0b\u56fe\u6e32\u67d3\u3002</p> <p>\u5b83\u8ffd\u6c42\u6781\u7b80\u3001\u6613\u7528\u3001\u53ef\u6269\u5c55\uff0c\u9002\u5408\u5feb\u901f\u539f\u578b\u3001\u5b9a\u5236\u5316 LLM \u5de5\u4f5c\u6d41\u3001Agent \u4efb\u52a1\u6d41\u7b49\u573a\u666f\u3002</p>"},{"location":"#_1","title":"\u529f\u80fd\u7279\u6027","text":"<ul> <li>\u8282\u70b9\u5f0f\u5de5\u4f5c\u6d41\uff1a\u652f\u6301\u5206\u652f\u3001\u5faa\u73af\u3001\u5b50\u6d41\u7a0b</li> <li>\u540c\u6b65\u4e0e\u5f02\u6b65\uff1a\u652f\u6301\u540c\u6b65\u4e0e\u5f02\u6b65\u6267\u884c</li> <li>\u6d41\u7a0b\u56fe\u6e32\u67d3\uff1a\u652f\u6301 <code>dot</code> \u548c <code>mermaid</code> \u683c\u5f0f</li> <li>\u4ee3\u7801\u7b80\u6d01\uff1a\u6613\u4e8e\u7406\u89e3\u548c\u6269\u5c55</li> </ul>"},{"location":"#_2","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u5373\u53ef\u5b9a\u4e49\u5e76\u8fd0\u884c\u4e00\u4e2a\u5de5\u4f5c\u6d41\uff1a</p> <pre><code>from agnflow import Node, Flow\n\n# 1. \u5b9a\u4e49\u8282\u70b9\ndef hello_exec(state):\n    print(\"hello\", state)\n    return {\"msg\": \"world\"}\n\ndef world_exec(state):\n    print(\"world\", state)\n\nn1 = Node(\"hello\", exec=hello_exec)\nn2 = Node(\"world\", exec=world_exec)\n\n# 2. \u8fde\u63a5\u8282\u70b9\nn1 &gt;&gt; n2\n\n# 3. \u6784\u5efa\u5e76\u8fd0\u884c\nflow = Flow(n1, name=\"demo\")\nflow.run({\"msg\": \"hi\"})\n</code></pre>"},{"location":"#_3","title":"\u63a5\u4e0b\u6765","text":"<ul> <li>\u67e5\u770b \u5feb\u901f\u5f00\u59cb \u9875\u9762\u4e86\u89e3\u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u3002</li> <li>\u6df1\u5165 API \u53c2\u8003 \u4e86\u89e3 <code>Node</code> \u548c <code>Flow</code> \u7684\u6240\u6709\u529f\u80fd\u3002 </li> </ul>"},{"location":"AGENT_INTEGRATION/","title":"\u667a\u80fd\u4f53\u529f\u80fd\u4e0e\u5de5\u4f5c\u6d41\u7f16\u6392\u96c6\u6210","text":""},{"location":"AGENT_INTEGRATION/#_2","title":"\u6982\u8ff0","text":"<p>Agnflow \u63d0\u4f9b\u4e86\u4e24\u79cd\u4f7f\u7528\u667a\u80fd\u4f53\u529f\u80fd\u7684\u65b9\u5f0f\uff1a</p> <ol> <li>\u72ec\u7acb\u667a\u80fd\u4f53 (<code>utils.py</code>) - \u76f4\u63a5\u4f7f\u7528\u667a\u80fd\u4f53\u7b97\u6cd5</li> <li>\u5de5\u4f5c\u6d41\u667a\u80fd\u4f53 (<code>agents.py</code>) - \u5c06\u667a\u80fd\u4f53\u7b97\u6cd5\u4e0e\u5de5\u4f5c\u6d41\u7f16\u6392\u7ed3\u5408</li> </ol>"},{"location":"AGENT_INTEGRATION/#_3","title":"\u4e24\u79cd\u65b9\u5f0f\u7684\u5bf9\u6bd4","text":""},{"location":"AGENT_INTEGRATION/#1-utilspy","title":"1. \u72ec\u7acb\u667a\u80fd\u4f53 (utils.py)","text":"<p>\u7279\u70b9\uff1a - \u76f4\u63a5\u4f7f\u7528\u667a\u80fd\u4f53\u7b97\u6cd5 - \u4e0d\u4f9d\u8d56\u5de5\u4f5c\u6d41\u6846\u67b6 - \u7b80\u5355\u76f4\u63a5\uff0c\u9002\u5408\u5feb\u901f\u539f\u578b</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a <pre><code>from agnflow.utils import create_react_agent, create_tao_agent\n\n# \u76f4\u63a5\u4f7f\u7528ReAct\u4ee3\u7406\nreact_agent = create_react_agent()\nresult = react_agent.solve(\"\u8ba1\u7b97 15 + 27\")\n\n# \u76f4\u63a5\u4f7f\u7528TAO\u4ee3\u7406\ntao_agent = create_tao_agent()\nresult = tao_agent.solve(\"\u89e3\u91ca\u4ec0\u4e48\u662f\u673a\u5668\u5b66\u4e60\")\n</code></pre></p>"},{"location":"AGENT_INTEGRATION/#2-agentspy","title":"2. \u5de5\u4f5c\u6d41\u667a\u80fd\u4f53 (agents.py)","text":"<p>\u7279\u70b9\uff1a - \u5c06\u667a\u80fd\u4f53\u7b97\u6cd5\u5c01\u88c5\u4e3a\u5de5\u4f5c\u6d41\u8282\u70b9 - \u652f\u6301\u590d\u6742\u7684\u6d41\u7a0b\u7f16\u6392 - \u53ef\u89c6\u5316\u3001\u8c03\u8bd5\u3001\u76d1\u63a7\u53cb\u597d</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a <pre><code>from agnflow.agents import create_react_workflow, create_tao_workflow\n\n# \u4f7f\u7528ReAct\u5de5\u4f5c\u6d41\nreact_workflow = create_react_workflow()\nresult = react_workflow.solve(\"\u8ba1\u7b97 15 + 27\")\n\n# \u4f7f\u7528TAO\u5de5\u4f5c\u6d41\ntao_workflow = create_tao_workflow()\nresult = tao_workflow.solve(\"\u89e3\u91ca\u4ec0\u4e48\u662f\u673a\u5668\u5b66\u4e60\")\n</code></pre></p>"},{"location":"AGENT_INTEGRATION/#_4","title":"\u8be6\u7ec6\u529f\u80fd\u5bf9\u6bd4","text":"\u529f\u80fd \u72ec\u7acb\u667a\u80fd\u4f53 \u5de5\u4f5c\u6d41\u667a\u80fd\u4f53 \u4f7f\u7528\u590d\u6742\u5ea6 \u7b80\u5355 \u4e2d\u7b49 \u6d41\u7a0b\u63a7\u5236 \u6709\u9650 \u5f3a\u5927 \u53ef\u89c6\u5316 \u4e0d\u652f\u6301 \u652f\u6301 \u8c03\u8bd5 \u56f0\u96be \u5bb9\u6613 \u6269\u5c55\u6027 \u4e2d\u7b49 \u9ad8 \u6027\u80fd \u9ad8 \u4e2d\u7b49 \u9002\u7528\u573a\u666f \u5feb\u901f\u539f\u578b\u3001\u7b80\u5355\u4efb\u52a1 \u590d\u6742\u6d41\u7a0b\u3001\u751f\u4ea7\u73af\u5883"},{"location":"AGENT_INTEGRATION/#_5","title":"\u5de5\u4f5c\u6d41\u667a\u80fd\u4f53\u7684\u4f18\u52bf","text":""},{"location":"AGENT_INTEGRATION/#1","title":"1. \u53ef\u89c6\u5316\u652f\u6301","text":"<pre><code>from agnflow.agents import create_react_workflow\n\nworkflow = create_react_workflow()\n\n# \u751f\u6210DOT\u683c\u5f0f\u53ef\u89c6\u5316\ndot_str = workflow.flow.render_dot(\"workflow.png\")\n\n# \u751f\u6210Mermaid\u683c\u5f0f\u53ef\u89c6\u5316\nmermaid_str = workflow.flow.render_mermaid(\"workflow.png\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#2","title":"2. \u590d\u6742\u6d41\u7a0b\u7f16\u6392","text":"<pre><code>from agnflow.agents import create_llm_node, create_search_node, create_memory_node\nfrom agnflow.core import Flow\n\n# \u521b\u5efa\u81ea\u5b9a\u4e49\u5de5\u4f5c\u6d41\nllm_node = create_llm_node(\"analysis\")\nsearch_node = create_search_node(\"research\")\nmemory_node = create_memory_node(\"store\")\n\n# \u6784\u5efa\u590d\u6742\u6d41\u7a0b\nllm_node &gt;&gt; \"need_search\" &gt;&gt; search_node &gt;&gt; \"default\" &gt;&gt; memory_node &gt;&gt; \"default\" &gt;&gt; llm_node\nllm_node &gt;&gt; \"final\" &gt;&gt; \"end\"\n\nflow = Flow(start=llm_node, name=\"complex_workflow\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#3","title":"3. \u72b6\u6001\u7ba1\u7406\u548c\u8c03\u8bd5","text":"<pre><code># \u5de5\u4f5c\u6d41\u63d0\u4f9b\u5b8c\u6574\u7684\u72b6\u6001\u7ba1\u7406\nstate = {\n    \"query\": \"\u7528\u6237\u95ee\u9898\",\n    \"iteration\": 0,\n    \"thoughts\": [],\n    \"actions\": []\n}\n\nresult = workflow.solve(\"\u95ee\u9898\", state)\nprint(f\"\u6700\u7ec8\u72b6\u6001: {state}\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#_6","title":"\u57fa\u7840\u8282\u70b9\u7c7b\u578b","text":""},{"location":"AGENT_INTEGRATION/#1-llmnode-llm","title":"1. LLMNode - LLM\u8c03\u7528\u8282\u70b9","text":"<pre><code>from agnflow.agents import create_llm_node\n\nllm_node = create_llm_node(\n    name=\"my_llm\",\n    model=\"glm-4-flashx-250414\",\n    system_prompt=\"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\",\n    output_format=\"yaml\"\n)\n</code></pre>"},{"location":"AGENT_INTEGRATION/#2-searchnode-","title":"2. SearchNode - \u641c\u7d22\u8282\u70b9","text":"<pre><code>from agnflow.agents import create_search_node\n\nsearch_node = create_search_node(\n    name=\"my_search\",\n    search_engine=\"duckduckgo\"\n)\n</code></pre>"},{"location":"AGENT_INTEGRATION/#3-memorynode-","title":"3. MemoryNode - \u8bb0\u5fc6\u8282\u70b9","text":"<pre><code>from agnflow.agents import create_memory_node\n\nmemory_node = create_memory_node(\n    name=\"my_memory\",\n    max_messages=10\n)\n</code></pre>"},{"location":"AGENT_INTEGRATION/#4-ragnode-rag","title":"4. RAGNode - RAG\u8282\u70b9","text":"<pre><code>from agnflow.agents import create_rag_node\n\nrag_node = create_rag_node(name=\"my_rag\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#5-toolnode-","title":"5. ToolNode - \u5de5\u5177\u8282\u70b9","text":"<pre><code>from agnflow.agents import create_tool_node\n\ntool_node = create_tool_node(name=\"my_tools\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#_7","title":"\u9ad8\u7ea7\u5de5\u4f5c\u6d41\u7c7b\u578b","text":""},{"location":"AGENT_INTEGRATION/#1-reactworkflow-","title":"1. ReActWorkflow - \u63a8\u7406+\u884c\u52a8\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow.agents import create_react_workflow\n\nworkflow = create_react_workflow()\nresult = workflow.solve(\"\u590d\u6742\u95ee\u9898\", max_iterations=5)\n</code></pre>"},{"location":"AGENT_INTEGRATION/#2-taoworkflow-","title":"2. TAOWorkflow - \u601d\u8003+\u884c\u52a8+\u89c2\u5bdf\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow.agents import create_tao_workflow\n\nworkflow = create_tao_workflow()\nresult = workflow.solve(\"\u590d\u6742\u95ee\u9898\", max_iterations=5)\n</code></pre>"},{"location":"AGENT_INTEGRATION/#3-cotworkflow-","title":"3. CoTWorkflow - \u601d\u7ef4\u94fe\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow.agents import create_cot_workflow\n\nworkflow = create_cot_workflow(max_steps=5)\nresult = workflow.solve(\"\u9700\u8981\u63a8\u7406\u7684\u95ee\u9898\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#4-ragworkflow-","title":"4. RAGWorkflow - \u68c0\u7d22\u589e\u5f3a\u751f\u6210\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow.agents import create_rag_workflow\n\nworkflow = create_rag_workflow()\nresult = workflow.solve(\"\u95ee\u9898\", documents=[\"\u6587\u68631\", \"\u6587\u68632\"])\n</code></pre>"},{"location":"AGENT_INTEGRATION/#_8","title":"\u9009\u62e9\u5efa\u8bae","text":""},{"location":"AGENT_INTEGRATION/#_9","title":"\u4f7f\u7528\u72ec\u7acb\u667a\u80fd\u4f53\u7684\u573a\u666f\uff1a","text":"<ul> <li>\u5feb\u901f\u539f\u578b\u5f00\u53d1</li> <li>\u7b80\u5355\u7684\u667a\u80fd\u4f53\u4efb\u52a1</li> <li>\u5bf9\u6027\u80fd\u8981\u6c42\u8f83\u9ad8</li> <li>\u4e0d\u9700\u8981\u590d\u6742\u6d41\u7a0b\u63a7\u5236</li> </ul>"},{"location":"AGENT_INTEGRATION/#_10","title":"\u4f7f\u7528\u5de5\u4f5c\u6d41\u667a\u80fd\u4f53\u7684\u573a\u666f\uff1a","text":"<ul> <li>\u590d\u6742\u7684\u4e1a\u52a1\u6d41\u7a0b</li> <li>\u9700\u8981\u53ef\u89c6\u5316\u548c\u8c03\u8bd5</li> <li>\u751f\u4ea7\u73af\u5883\u90e8\u7f72</li> <li>\u9700\u8981\u72b6\u6001\u7ba1\u7406\u548c\u76d1\u63a7</li> <li>\u591a\u6b65\u9aa4\u3001\u591a\u5206\u652f\u7684\u667a\u80fd\u4f53\u4efb\u52a1</li> </ul>"},{"location":"AGENT_INTEGRATION/#_11","title":"\u8fc1\u79fb\u6307\u5357","text":""},{"location":"AGENT_INTEGRATION/#_12","title":"\u4ece\u72ec\u7acb\u667a\u80fd\u4f53\u8fc1\u79fb\u5230\u5de5\u4f5c\u6d41\u667a\u80fd\u4f53\uff1a","text":"<pre><code># \u539f\u6765\u7684\u4ee3\u7801\nfrom agnflow.utils import create_react_agent\nagent = create_react_agent()\nresult = agent.solve(\"\u95ee\u9898\")\n\n# \u8fc1\u79fb\u540e\u7684\u4ee3\u7801\nfrom agnflow.agents import create_react_workflow\nworkflow = create_react_workflow()\nresult = workflow.solve(\"\u95ee\u9898\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#_13","title":"\u4ece\u5de5\u4f5c\u6d41\u667a\u80fd\u4f53\u8fc1\u79fb\u5230\u72ec\u7acb\u667a\u80fd\u4f53\uff1a","text":"<pre><code># \u539f\u6765\u7684\u4ee3\u7801\nfrom agnflow.agents import create_react_workflow\nworkflow = create_react_workflow()\nresult = workflow.solve(\"\u95ee\u9898\")\n\n# \u8fc1\u79fb\u540e\u7684\u4ee3\u7801\nfrom agnflow.utils import create_react_agent\nagent = create_react_agent()\nresult = agent.solve(\"\u95ee\u9898\")\n</code></pre>"},{"location":"AGENT_INTEGRATION/#_14","title":"\u603b\u7ed3","text":"<p>\u4e24\u79cd\u65b9\u5f0f\u5404\u6709\u4f18\u52bf\uff0c\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u9700\u6c42\u9009\u62e9\uff1a</p> <ul> <li>\u72ec\u7acb\u667a\u80fd\u4f53\uff1a\u7b80\u5355\u3001\u9ad8\u6548\u3001\u76f4\u63a5</li> <li>\u5de5\u4f5c\u6d41\u667a\u80fd\u4f53\uff1a\u5f3a\u5927\u3001\u53ef\u89c6\u5316\u3001\u53ef\u6269\u5c55</li> </ul> <p>Agnflow \u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u5e76\u5b58\uff0c\u7528\u6237\u53ef\u4ee5\u6839\u636e\u9879\u76ee\u9700\u6c42\u7075\u6d3b\u9009\u62e9\u3002 </p>"},{"location":"API/","title":"API \u53c2\u8003","text":"<p>\u672c\u9875\u63d0\u4f9b <code>agnflow</code> \u4e3b\u8981\u7c7b\u7684 API \u53c2\u8003\u3002</p>"},{"location":"API/#flow","title":"<code>Flow</code> \u7c7b","text":"<p><code>Flow</code> \u7c7b\u7528\u4e8e\u6784\u5efa\u548c\u6267\u884c\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"API/#__init__self-start_node-node-name-str-flow","title":"<code>__init__(self, start_node: Node, name: str = \"flow\")</code>","text":"<p>\u521d\u59cb\u5316\u4e00\u4e2a\u5de5\u4f5c\u6d41\u3002</p> <ul> <li><code>start_node</code>: \u5de5\u4f5c\u6d41\u7684\u8d77\u59cb\u8282\u70b9\u3002</li> <li><code>name</code>: (\u53ef\u9009) \u5de5\u4f5c\u6d41\u7684\u540d\u79f0\u3002</li> </ul>"},{"location":"API/#runself-initial_state-dict-none-dict","title":"<code>run(self, initial_state: dict = None) -&gt; dict</code>","text":"<p>\u540c\u6b65\u6267\u884c\u5de5\u4f5c\u6d41\u3002</p> <ul> <li><code>initial_state</code>: (\u53ef\u9009) \u5de5\u4f5c\u6d41\u7684\u521d\u59cb\u72b6\u6001\u5b57\u5178\u3002</li> <li>\u8fd4\u56de: \u5de5\u4f5c\u6d41\u6267\u884c\u5b8c\u6bd5\u540e\u7684\u6700\u7ec8\u72b6\u6001\u3002</li> </ul>"},{"location":"API/#arunself-initial_state-dict-none-dict","title":"<code>arun(self, initial_state: dict = None) -&gt; dict</code>","text":"<p>\u5f02\u6b65\u6267\u884c\u5de5\u4f5c\u6d41\u3002</p> <ul> <li><code>initial_state</code>: (\u53ef\u9009) \u5de5\u4f5c\u6d41\u7684\u521d\u59cb\u72b6\u6001\u5b57\u5178\u3002</li> <li>\u8fd4\u56de: \u5de5\u4f5c\u6d41\u6267\u884c\u5b8c\u6bd5\u540e\u7684\u6700\u7ec8\u72b6\u6001\u3002</li> </ul>"},{"location":"API/#render_dotself-saved_file-str-none-str","title":"<code>render_dot(self, saved_file: str = None) -&gt; str</code>","text":"<p>\u5c06\u5de5\u4f5c\u6d41\u6e32\u67d3\u4e3a <code>dot</code> \u683c\u5f0f\u3002</p> <ul> <li><code>saved_file</code>: (\u53ef\u9009) \u56fe\u7247\u4fdd\u5b58\u8def\u5f84\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u751f\u6210\u56fe\u7247\u6587\u4ef6\u3002</li> <li>\u8fd4\u56de: <code>dot</code> \u8bed\u8a00\u63cf\u8ff0\u7684\u5b57\u7b26\u4e32\u3002</li> </ul>"},{"location":"API/#render_mermaidself-saved_file-str-none-str","title":"<code>render_mermaid(self, saved_file: str = None) -&gt; str</code>","text":"<p>\u5c06\u5de5\u4f5c\u6d41\u6e32\u67d3\u4e3a <code>mermaid</code> \u683c\u5f0f\u3002</p> <ul> <li><code>saved_file</code>: (\u53ef\u9009) \u56fe\u7247\u4fdd\u5b58\u8def\u5f84\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u751f\u6210\u56fe\u7247\u6587\u4ef6\u3002</li> <li>\u8fd4\u56de: <code>mermaid</code> \u8bed\u8a00\u63cf\u8ff0\u7684\u5b57\u7b26\u4e32\u3002</li> </ul>"},{"location":"API/#node","title":"<code>Node</code> \u7c7b","text":"<p><code>Node</code> \u7c7b\u662f\u5de5\u4f5c\u6d41\u4e2d\u7684\u57fa\u672c\u6267\u884c\u5355\u5143\u3002</p>"},{"location":"API/#__init__self-name-str-exec-callable-none-aexec-callable-none-max_retries-int-0-wait-int-0","title":"<code>__init__(self, name: str, exec: callable = None, aexec: callable = None, max_retries: int = 0, wait: int = 0)</code>","text":"<p>\u521d\u59cb\u5316\u4e00\u4e2a\u8282\u70b9\u3002</p> <ul> <li><code>name</code>: \u8282\u70b9\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>exec</code>: (\u53ef\u9009) \u8282\u70b9\u7684\u540c\u6b65\u6267\u884c\u51fd\u6570\u3002</li> <li><code>aexec</code>: (\u53ef\u9009) \u8282\u70b9\u7684\u5f02\u6b65\u6267\u884c\u51fd\u6570\u3002</li> <li><code>max_retries</code>: (\u53ef\u9009) \u5931\u8d25\u540e\u7684\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u3002</li> <li><code>wait</code>: (\u53ef\u9009) \u6bcf\u6b21\u91cd\u8bd5\u4e4b\u95f4\u7684\u7b49\u5f85\u79d2\u6570\u3002</li> </ul>"},{"location":"API/#__rshift__self-other","title":"<code>__rshift__(self, other)</code>","text":"<p>\u5b9a\u4e49\u8282\u70b9\u8fde\u63a5\uff0c\u4f8b\u5982 <code>n1 &gt;&gt; n2</code>\u3002</p>"},{"location":"API/#_1","title":"\u8282\u70b9\u6267\u884c\u51fd\u6570","text":""},{"location":"API/#_2","title":"\u8f93\u5165\u53c2\u6570","text":"<p><code>agnflow</code> \u4f1a\u6839\u636e\u51fd\u6570\u7b7e\u540d\u81ea\u52a8\u4ece\u72b6\u6001\u5b57\u5178\u4e2d\u6ce8\u5165\u53c2\u6570\u3002</p> <pre><code># \u63a5\u6536\u6574\u4e2a\u72b6\u6001\ndef my_node(state: dict):\n    ...\n\n# \u6309\u540d\u79f0\u63a5\u6536\u7279\u5b9a\u53c2\u6570\ndef my_node(user_id, message):\n    ...\n</code></pre>"},{"location":"API/#_3","title":"\u8fd4\u56de\u503c","text":"<p>\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4f1a\u66f4\u65b0\u72b6\u6001\uff0c\u5e76\u51b3\u5b9a\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u8282\u70b9\u3002</p> <pre><code># \u65b9\u5f0f1: \u53ea\u8fd4\u56de\u65b0\u72b6\u6001 (\u5b57\u5178)\ndef my_node(state):\n    return {\"new_data\": \"value\"}\n\n# \u65b9\u5f0f2: \u8fd4\u56de action \u548c\u65b0\u72b6\u6001 (\u5143\u7ec4)\ndef my_node(state):\n    if state.get(\"condition\"):\n        return \"success\", {\"result\": \"ok\"}\n    return \"error\", {\"result\": \"fail\"}\n\n# \u65b9\u5f0f3: \u53ea\u8fd4\u56de action (\u5b57\u7b26\u4e32)\ndef my_node(state):\n    return \"next_step\"\n\n# \u65b9\u5f0f4: \u8fd4\u56de None\n# \u5c06\u7ed3\u675f\u6574\u4e2a\u5de5\u4f5c\u6d41\ndef my_node(state):\n    return None\n</code></pre>"},{"location":"a2a/","title":"A2a","text":"<p>\u6784\u5efa\u5206\u5e03\u5f0fAgent-to-Agent\uff08A2A\uff09\u7cfb\u7edf\u9700\u8981\u4ece\u901a\u4fe1\u3001\u534f\u8c03\u3001\u72b6\u6001\u7ba1\u7406\u7b49\u6838\u5fc3\u6a21\u5757\u5165\u624b\uff0c\u4ee5\u4e0b\u662f\u4e00\u5957\u5b8c\u6574\u7684\u5b9e\u73b0\u6846\u67b6\u548c\u5173\u952e\u6280\u672f\u65b9\u6848\uff0c\u7ed3\u5408Python\u751f\u6001\u548c\u5206\u5e03\u5f0f\u7cfb\u7edf\u8bbe\u8ba1\u539f\u5219\uff0c\u5206\u6b65\u9aa4\u62c6\u89e3\u5b9e\u73b0\u8def\u5f84\uff1a  </p>"},{"location":"a2a/#_1","title":"\u4e00\u3001\u6838\u5fc3\u67b6\u6784\u8bbe\u8ba1\uff1a\u5206\u5c42\u89e3\u8026\u6a21\u578b","text":""},{"location":"a2a/#1","title":"1. \u901a\u4fe1\u5c42\uff08\u5fc5\u9009\uff09","text":"<ul> <li>\u6d88\u606f\u961f\u5217\uff1a\u5f02\u6b65\u89e3\u8026\u667a\u80fd\u4f53\u95f4\u901a\u4fe1\uff0c\u63a8\u8350\u4ee5\u4e0b\u65b9\u6848\uff1a  </li> <li>RabbitMQ\uff08\u9ad8\u53ef\u9760\uff09\uff1a\u652f\u6301\u4e3b\u9898\u8ba2\u9605\u3001\u8def\u7531\u7b56\u7565\uff0c\u9002\u5408\u590d\u6742\u62d3\u6251\u3002  </li> <li>Apache Kafka\uff08\u9ad8\u541e\u5410\uff09\uff1a\u9002\u5408\u5927\u6570\u636e\u91cf\u6d41\u5904\u7406\u573a\u666f\u3002  </li> <li> <p>Redis Pub/Sub\uff08\u8f7b\u91cf\u7ea7\uff09\uff1a\u7b80\u5355\u5feb\u901f\uff0c\u9002\u5408\u5c0f\u89c4\u6a21\u96c6\u7fa4\u3002  </p> </li> <li> <p>\u793a\u4f8b\uff1a\u57fa\u4e8eRabbitMQ\u7684\u901a\u4fe1\u5b9e\u73b0 <pre><code>import pika, json, uuid\nfrom threading import Thread\n\nclass AgentComm:\n    def __init__(self, agent_id, host=\"localhost\"):\n        self.agent_id = agent_id\n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(host))\n        self.channel = self.connection.channel()\n        self.response_queue = f\"response_{agent_id}\"\n        self.channel.queue_declare(queue=self.response_queue)\n\n    def send_message(self, receiver, message_type, data):\n        # \u751f\u6210\u552f\u4e00\u8bf7\u6c42ID\u7528\u4e8e\u5339\u914d\u54cd\u5e94\n        corr_id = str(uuid.uuid4())\n        self.channel.basic_publish(\n            exchange=\"\",\n            routing_key=receiver,  # \u76f4\u63a5\u53d1\u9001\u5230\u63a5\u6536\u65b9\u961f\u5217\n            properties=pika.BasicProperties(\n                reply_to=self.response_queue,\n                correlation_id=corr_id\n            ),\n            body=json.dumps({\n                \"sender\": self.agent_id,\n                \"type\": message_type,\n                \"data\": data,\n                \"corr_id\": corr_id\n            }).encode()\n        )\n        return corr_id\n\n    def start_listening(self, callback):\n        # \u5f02\u6b65\u76d1\u542c\u54cd\u5e94\u6d88\u606f\n        def listener():\n            self.channel.basic_consume(\n                queue=self.response_queue,\n                on_message_callback=lambda ch, method, props, body: \n                    callback(json.loads(body.decode()), props.correlation_id),\n                auto_ack=True\n            )\n            self.channel.start_consuming()\n        Thread(target=listener, daemon=True).start()\n</code></pre></p> </li> </ul>"},{"location":"a2a/#2","title":"2. \u670d\u52a1\u53d1\u73b0\u4e0e\u534f\u8c03\u5c42\uff08\u5173\u952e\uff09","text":"<ul> <li>\u6ce8\u518c\u4e2d\u5fc3\uff1a\u7ba1\u7406\u667a\u80fd\u4f53\u5730\u5740\u4e0e\u72b6\u6001\uff0c\u63a8\u8350\uff1a  </li> <li>etcd\uff08\u5f3a\u4e00\u81f4\u6027\uff09\uff1a\u9002\u5408\u5bf9\u72b6\u6001\u4e00\u81f4\u6027\u8981\u6c42\u9ad8\u7684\u573a\u666f\u3002  </li> <li>Consul\uff08\u96c6\u6210\u670d\u52a1\u5065\u5eb7\u68c0\u67e5\uff09\uff1a\u81ea\u52a8\u5254\u9664\u5931\u6548\u8282\u70b9\u3002  </li> <li> <p>ZooKeeper\uff08\u5206\u5e03\u5f0f\u534f\u8c03\uff09\uff1a\u9002\u5408\u590d\u6742\u7684\u8282\u70b9\u9009\u4e3e\u573a\u666f\u3002  </p> </li> <li> <p>\u793a\u4f8b\uff1a\u57fa\u4e8eetcd\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0 <pre><code>import etcd3, json, time\nfrom uuid import uuid4\n\nclass AgentRegistry:\n    def __init__(self, etcd_host=\"localhost\", etcd_port=2379):\n        self.client = etcd3.client(host=etcd_host, port=etcd_port)\n        self.agent_prefix = \"/agents/\"\n\n    def register_agent(self, agent_id, metadata):\n        # \u6ce8\u518c\u667a\u80fd\u4f53\u4fe1\u606f\uff08\u542bIP\u3001\u7aef\u53e3\u3001\u72b6\u6001\u7b49\uff09\n        key = f\"{self.agent_prefix}{agent_id}\"\n        self.client.put(key, json.dumps(metadata).encode(), lease=10)  # 10\u79d2\u79df\u7ea6\n        # \u542f\u52a8\u79df\u7ea6\u7eed\u7ea6\u7ebf\u7a0b\n        def keep_alive():\n            lease = self.client.lease(10)\n            self.client.put(key, json.dumps(metadata).encode(), lease=lease.id)\n            while True:\n                self.client.lease.keep_alive(lease.id)\n                time.sleep(5)\n        import threading\n        threading.Thread(target=keep_alive, daemon=True).start()\n\n    def get_all_agents(self):\n        # \u83b7\u53d6\u6240\u6709\u5728\u7ebf\u667a\u80fd\u4f53\n        agents = {}\n        for key, val in self.client.get_prefix(self.agent_prefix):\n            agent_id = key.decode().split(\"/\")[-1]\n            agents[agent_id] = json.loads(val.decode())\n        return agents\n</code></pre></p> </li> </ul>"},{"location":"a2a/#3","title":"3. \u72b6\u6001\u7ba1\u7406\u5c42\uff08\u6309\u9700\uff09","text":"<ul> <li>\u5206\u5e03\u5f0f\u5b58\u50a8\uff1a  </li> <li>Redis\uff1a\u5b58\u50a8\u4e34\u65f6\u72b6\u6001\uff08\u5982\u4f1a\u8bdd\u3001\u4efb\u52a1\u8fdb\u5ea6\uff09\u3002  </li> <li>MongoDB\uff1a\u5b58\u50a8\u975e\u7ed3\u6784\u5316\u5386\u53f2\u6570\u636e\uff08\u5982\u4ea4\u4e92\u65e5\u5fd7\uff09\u3002  </li> <li>PostgreSQL\uff1a\u5b58\u50a8\u7ed3\u6784\u5316\u72b6\u6001\uff08\u5982\u667a\u80fd\u4f53\u914d\u7f6e\u3001\u4efb\u52a1\u5143\u6570\u636e\uff09\u3002  </li> </ul>"},{"location":"a2a/#_2","title":"\u4e8c\u3001\u667a\u80fd\u4f53\u6838\u5fc3\u6a21\u5757\uff1a\u529f\u80fd\u5c01\u88c5","text":""},{"location":"a2a/#1_1","title":"1. \u667a\u80fd\u4f53\u57fa\u7c7b\u8bbe\u8ba1","text":"<pre><code>import abc, threading, time\nfrom typing import Dict, Callable, Any\n\nclass BaseAgent(abc.ABC):\n    def __init__(self, agent_id, comm_config, registry_config):\n        self.agent_id = agent_id\n        # \u521d\u59cb\u5316\u901a\u4fe1\u6a21\u5757\n        self.comm = AgentComm(agent_id, **comm_config)\n        # \u521d\u59cb\u5316\u6ce8\u518c\u6a21\u5757\n        self.registry = AgentRegistry(**registry_config)\n        self.registry.register_agent(\n            agent_id, \n            {\"address\": f\"localhost:{self.get_port()}\", \"type\": self.get_type()}\n        )\n        self.message_handlers = {}  # \u6d88\u606f\u7c7b\u578b-\u5904\u7406\u51fd\u6570\u6620\u5c04\n        self.running = False\n\n    @abc.abstractmethod\n    def get_port(self) -&gt; int:\n        \"\"\"\u83b7\u53d6\u667a\u80fd\u4f53\u76d1\u542c\u7aef\u53e3\uff08\u9700\u5b50\u7c7b\u5b9e\u73b0\uff09\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_type(self) -&gt; str:\n        \"\"\"\u83b7\u53d6\u667a\u80fd\u4f53\u7c7b\u578b\uff08\u5982\u51b3\u7b56\u578b\u3001\u6570\u636e\u578b\uff09\"\"\"\n        pass\n\n    def register_handler(self, msg_type: str, handler: Callable):\n        \"\"\"\u6ce8\u518c\u6d88\u606f\u5904\u7406\u51fd\u6570\"\"\"\n        self.message_handlers[msg_type] = handler\n\n    def start(self):\n        \"\"\"\u542f\u52a8\u667a\u80fd\u4f53\uff08\u76d1\u542c\u6d88\u606f+\u4e1a\u52a1\u903b\u8f91\uff09\"\"\"\n        self.running = True\n        # \u542f\u52a8\u6d88\u606f\u76d1\u542c\u7ebf\u7a0b\n        self.comm.start_listening(self._message_processor)\n        # \u542f\u52a8\u4e1a\u52a1\u903b\u8f91\u7ebf\u7a0b\uff08\u9700\u5b50\u7c7b\u5b9e\u73b0\uff09\n        threading.Thread(target=self._business_logic, daemon=True).start()\n        print(f\"Agent {self.agent_id} started.\")\n\n    def stop(self):\n        \"\"\"\u505c\u6b62\u667a\u80fd\u4f53\"\"\"\n        self.running = False\n        self.comm.connection.close()\n\n    def _message_processor(self, message: Dict[str, Any], corr_id: str):\n        \"\"\"\u6d88\u606f\u5904\u7406\u5206\u53d1\"\"\"\n        msg_type = message.get(\"type\")\n        if msg_type in self.message_handlers:\n            try:\n                response = self.message_handlers[msg_type](message)\n                # \u56de\u590d\u6d88\u606f\uff08\u53d1\u9001\u5230\u53d1\u9001\u65b9\u7684\u54cd\u5e94\u961f\u5217\uff09\n                self.comm.send_message(\n                    message[\"sender\"], \n                    f\"response_{msg_type}\", \n                    {\"data\": response, \"corr_id\": corr_id}\n                )\n            except Exception as e:\n                print(f\"\u5904\u7406\u6d88\u606f\u51fa\u9519: {e}\")\n\n    @abc.abstractmethod\n    def _business_logic(self):\n        \"\"\"\u667a\u80fd\u4f53\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\uff08\u9700\u5b50\u7c7b\u5b9e\u73b0\uff09\"\"\"\n        pass\n</code></pre>"},{"location":"a2a/#2_1","title":"2. \u793a\u4f8b\uff1a\u51b3\u7b56\u578b\u667a\u80fd\u4f53\u5b50\u7c7b","text":"<pre><code>class DecisionAgent(BaseAgent):\n    def get_port(self):\n        return 8001  # \u5047\u8bbe\u7aef\u53e3\n\n    def get_type(self):\n        return \"decision\"\n\n    def _business_logic(self):\n        \"\"\"\u5b9a\u671f\u68c0\u67e5\u4efb\u52a1\u961f\u5217\u6216\u4e3b\u52a8\u53d1\u8d77\u534f\u4f5c\"\"\"\n        while self.running:\n            # \u4e1a\u52a1\u903b\u8f91\uff08\u5982\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u5f85\u5904\u7406\u4efb\u52a1\uff09\n            time.sleep(1)\n\n    def handle_task_request(self, message):\n        \"\"\"\u5904\u7406\u4efb\u52a1\u8bf7\u6c42\u6d88\u606f\"\"\"\n        data = message[\"data\"]\n        # \u51b3\u7b56\u903b\u8f91\uff08\u5982\u8c03\u7528\u6a21\u578b\u751f\u6210\u7ed3\u679c\uff09\n        result = f\"\u51b3\u7b56\u7ed3\u679c: {data['task']} \u7531 {self.agent_id} \u5904\u7406\"\n        return result\n\n    def start(self):\n        # \u6ce8\u518c\u6d88\u606f\u5904\u7406\u5668\n        self.register_handler(\"task_request\", self.handle_task_request)\n        super().start()\n</code></pre>"},{"location":"a2a/#_3","title":"\u4e09\u3001\u5206\u5e03\u5f0f\u62d3\u6251\u4e0e\u6269\u5c55\u65b9\u6848","text":""},{"location":"a2a/#1_2","title":"1. \u5e38\u89c1\u62d3\u6251\u7ed3\u6784","text":"<ul> <li>\u661f\u578b\u62d3\u6251\uff1a\u901a\u8fc7\u4e2d\u592e\u534f\u8c03\u5668\u8f6c\u53d1\u6d88\u606f\uff08\u7b80\u5355\u6613\u5b9e\u73b0\uff0c\u4f46\u5355\u70b9\u6545\u969c\u98ce\u9669\uff09\u3002  </li> <li>\u7f51\u72b6\u62d3\u6251\uff1a\u667a\u80fd\u4f53\u76f4\u63a5\u4e92\u8054\uff08\u53bb\u4e2d\u5fc3\u5316\uff0c\u9002\u5408\u5c0f\u89c4\u6a21\u96c6\u7fa4\uff09\u3002  </li> <li>\u5206\u5c42\u62d3\u6251\uff1a\u6309\u529f\u80fd\u5206\u7ec4\uff08\u5982\u6570\u636e\u5c42\u3001\u51b3\u7b56\u5c42\u3001\u63a5\u53e3\u5c42\uff09\uff0c\u7ec4\u5185\u4e92\u8054\uff0c\u7ec4\u95f4\u901a\u8fc7\u7f51\u5173\u901a\u4fe1\u3002  </li> </ul>"},{"location":"a2a/#2_2","title":"2. \u5f39\u6027\u6269\u5c55\u7b56\u7565","text":"<ul> <li>\u5bb9\u5668\u5316\u90e8\u7f72\uff1a\u4f7f\u7528Docker+Kubernetes\u7ba1\u7406\u667a\u80fd\u4f53\u5b9e\u4f8b\uff0c\u6309\u9700\u6269\u7f29\u5bb9\u3002  </li> <li>\u65e0\u72b6\u6001\u4e0e\u6709\u72b6\u6001\u5206\u79bb\uff1a  </li> <li>\u65e0\u72b6\u6001\u667a\u80fd\u4f53\uff08\u5982\u8ba1\u7b97\u578b\uff09\u53ef\u76f4\u63a5\u590d\u5236\u5b9e\u4f8b\u3002  </li> <li>\u6709\u72b6\u6001\u667a\u80fd\u4f53\uff08\u5982\u5b58\u50a8\u578b\uff09\u9700\u7ed3\u5408\u5206\u5e03\u5f0f\u5b58\u50a8\uff08\u5982Redis\u96c6\u7fa4\uff09\u540c\u6b65\u72b6\u6001\u3002  </li> </ul>"},{"location":"a2a/#_4","title":"\u56db\u3001\u5b9e\u6218\u90e8\u7f72\uff1a\u5355\u673a\u591a\u8fdb\u7a0b\u6a21\u62df\u5206\u5e03\u5f0f","text":"<p>\u4ee5\u4e0b\u4ee3\u7801\u6f14\u793a\u5982\u4f55\u5728\u5355\u673a\u4e0a\u542f\u52a8\u591a\u4e2a\u667a\u80fd\u4f53\u8fdb\u7a0b\uff0c\u6a21\u62df\u5206\u5e03\u5f0f\u4ea4\u4e92\uff1a <pre><code>import multiprocessing as mp\nfrom your_agent_module import BaseAgent, DecisionAgent, DataAgent  # \u5047\u8bbe\u5df2\u5b9a\u4e49\n\ndef run_agent(agent_class, agent_id, comm_config, registry_config):\n    agent = agent_class(agent_id, comm_config, registry_config)\n    agent.start()\n    # \u4fdd\u6301\u8fdb\u7a0b\u8fd0\u884c\n    try:\n        while True:\n            time.sleep(0.1)\n    except KeyboardInterrupt:\n        agent.stop()\n\nif __name__ == \"__main__\":\n    # \u914d\u7f6e\uff08\u5b9e\u9645\u90e8\u7f72\u65f6\u53ef\u4ece\u73af\u5883\u53d8\u91cf\u6216\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\uff09\n    comm_config = {\"host\": \"localhost\"}  # \u5047\u8bbeRabbitMQ\u5728\u672c\u5730\n    registry_config = {\"etcd_host\": \"localhost\"}  # \u5047\u8bbeetcd\u5728\u672c\u5730\n\n    # \u542f\u52a83\u4e2a\u667a\u80fd\u4f53\uff082\u4e2a\u51b3\u7b56\u578b\uff0c1\u4e2a\u6570\u636e\u578b\uff09\n    processes = [\n        mp.Process(target=run_agent, args=(DecisionAgent, \"agent_decision_1\", comm_config, registry_config)),\n        mp.Process(target=run_agent, args=(DecisionAgent, \"agent_decision_2\", comm_config, registry_config)),\n        mp.Process(target=run_agent, args=(DataAgent, \"agent_data_1\", comm_config, registry_config))\n    ]\n\n    for p in processes:\n        p.start()\n\n    # \u7b49\u5f85\u8fdb\u7a0b\u7ed3\u675f\n    for p in processes:\n        p.join()\n</code></pre></p>"},{"location":"a2a/#_5","title":"\u4e94\u3001\u5173\u952e\u6311\u6218\u4e0e\u89e3\u51b3\u65b9\u6848","text":"<ol> <li>\u4e00\u81f4\u6027\u95ee\u9898\uff1a  </li> <li>\u573a\u666f\uff1a\u591a\u4e2a\u667a\u80fd\u4f53\u540c\u65f6\u4fee\u6539\u5171\u4eab\u72b6\u6001\u3002  </li> <li> <p>\u65b9\u6848\uff1a\u4f7f\u7528etcd\u7684\u5206\u5e03\u5f0f\u9501\u6216\u4e50\u89c2\u9501\uff08\u7248\u672c\u53f7\u63a7\u5236\uff09\u3002  </p> </li> <li> <p>\u7f51\u7edc\u5ef6\u8fdf\u4e0e\u6545\u969c\uff1a  </p> </li> <li> <p>\u65b9\u6848\uff1a  </p> <ul> <li>\u6d88\u606f\u91cd\u8bd5\u673a\u5236\uff08\u5982RabbitMQ\u7684\u6b7b\u4fe1\u961f\u5217\uff09\u3002  </li> <li>\u8d85\u65f6\u8bbe\u7f6e\uff08\u598210\u79d2\u672a\u54cd\u5e94\u5219\u6807\u8bb0\u4e3a\u6545\u969c\uff09\u3002  </li> <li>\u5fc3\u8df3\u68c0\u6d4b\uff08\u5b9a\u671f\u53d1\u9001\u5b58\u6d3b\u4fe1\u53f7\u5230\u6ce8\u518c\u4e2d\u5fc3\uff09\u3002  </li> </ul> </li> <li> <p>\u53ef\u89c2\u6d4b\u6027\uff1a  </p> </li> <li>\u96c6\u6210\u5206\u5e03\u5f0f\u65e5\u5fd7\uff08ELK Stack\uff09\u548c\u94fe\u8def\u8ffd\u8e2a\uff08Jaeger\uff09\uff0c\u8bb0\u5f55\u667a\u80fd\u4f53\u4ea4\u4e92\u6d41\u7a0b\u3002  </li> </ol>"},{"location":"a2a/#_6","title":"\u516d\u3001\u8fdb\u9636\u65b9\u5411","text":"<ul> <li>AI\u80fd\u529b\u96c6\u6210\uff1a\u5728\u667a\u80fd\u4f53\u4e2d\u52a0\u5165LLM\u8c03\u7528\uff08\u5982\u901a\u8fc7OpenAI API\uff09\uff0c\u5b9e\u73b0\u8ba4\u77e5\u578b\u667a\u80fd\u4f53\u95f4\u7684\u81ea\u7136\u8bed\u8a00\u4ea4\u4e92\u3002  </li> <li>\u53bb\u4e2d\u5fc3\u5316\u534f\u8bae\uff1a\u57fa\u4e8eP2P\u7f51\u7edc\uff08\u5982libp2p\uff09\u6784\u5efa\u5b8c\u5168\u53bb\u4e2d\u5fc3\u5316\u7684A2A\u7cfb\u7edf\uff0c\u907f\u514d\u5355\u70b9\u4f9d\u8d56\u3002  </li> </ul> <p>\u901a\u8fc7\u4ee5\u4e0a\u6846\u67b6\uff0c\u53ef\u9010\u6b65\u6784\u5efa\u4ece\u7b80\u5355\u5230\u590d\u6742\u7684\u5206\u5e03\u5f0fA2A\u7cfb\u7edf\uff0c\u521d\u671f\u53ef\u5148\u5b9e\u73b0\u57fa\u7840\u901a\u4fe1\u548c\u6ce8\u518c\u529f\u80fd\uff0c\u518d\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u6269\u5c55AI\u903b\u8f91\u548c\u5206\u5e03\u5f0f\u7279\u6027\u3002</p>"},{"location":"getting-started/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u9875\u5c06\u5411\u60a8\u5c55\u793a <code>agnflow</code> \u7684\u6838\u5fc3\u529f\u80fd\u3002</p>"},{"location":"getting-started/#1","title":"1. \u5b89\u88c5","text":"<p>\u4ece PyPI \u5b89\u88c5 <code>agnflow</code>:</p> <pre><code>pip install agnflow\n</code></pre>"},{"location":"getting-started/#2","title":"2. \u5b9a\u4e49\u8282\u70b9","text":"<p>\u8282\u70b9\u662f\u5de5\u4f5c\u6d41\u7684\u57fa\u672c\u5355\u5143\u3002\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684 Python \u51fd\u6570\u4f5c\u4e3a\u8282\u70b9\u7684\u6267\u884c\u903b\u8f91\u3002</p> <pre><code>from agnflow import Node\n\ndef say_hello(state):\n    name = state.get(\"name\", \"World\")\n    print(f\"Hello, {name}!\")\n    return {\"message_said\": True}\n\nhello_node = Node(\"say_hello\", exec=say_hello)\n</code></pre>"},{"location":"getting-started/#_2","title":"\u5f02\u6b65\u8282\u70b9","text":"<p>\u5bf9\u4e8e I/O \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\uff1a</p> <pre><code>import asyncio\n\nasync def async_hello(state):\n    await asyncio.sleep(1)\n    print(\"Async Hello!\")\n\nasync_node = Node(\"async_hello\", aexec=async_hello)\n</code></pre>"},{"location":"getting-started/#3","title":"3. \u8fde\u63a5\u8282\u70b9","text":"<p>\u4f7f\u7528 <code>&gt;&gt;</code> \u64cd\u4f5c\u7b26\u6765\u5b9a\u4e49\u8282\u70b9\u95f4\u7684\u6267\u884c\u987a\u5e8f\u3002</p> <pre><code># \u7ebf\u6027\u8fde\u63a5\nn1 &gt;&gt; n2 &gt;&gt; n3\n\n# \u5206\u652f\u8fde\u63a5\n# \u8282\u70b9 \"a\" \u7684\u8fd4\u56de\u503c\u5c06\u51b3\u5b9a\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f \"b\" \u8fd8\u662f \"c\"\na &gt;&gt; [b, c]\n\n# \u5faa\u73af\n# \u8282\u70b9 \"c\" \u7684\u8fd4\u56de\u503c\u5982\u679c\u662f \"a\"\uff0c\u5219\u4f1a\u56de\u5230\u8282\u70b9 \"a\"\nc &gt;&gt; a\n</code></pre>"},{"location":"getting-started/#4","title":"4. \u6784\u5efa\u5e76\u8fd0\u884c\u5de5\u4f5c\u6d41","text":"<p>\u5c06\u8d77\u59cb\u8282\u70b9\u4f20\u5165 <code>Flow</code> \u6765\u6784\u5efa\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"getting-started/#_3","title":"\u540c\u6b65\u8fd0\u884c","text":"<pre><code>from agnflow import Flow\n\nflow = Flow(start_node, name=\"my_workflow\")\nfinal_state = flow.run(initial_state={\"name\": \"Alice\"})\nprint(final_state)\n</code></pre>"},{"location":"getting-started/#_4","title":"\u5f02\u6b65\u8fd0\u884c","text":"<pre><code>import asyncio\n\nflow = Flow(start_async_node)\nfinal_state = asyncio.run(flow.arun({}))\n</code></pre>"},{"location":"getting-started/#5","title":"5. \u6e32\u67d3\u6d41\u7a0b\u56fe","text":"<p>\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u5de5\u4f5c\u6d41\u53ef\u89c6\u5316\u3002</p> <pre><code># \u8f93\u51fa dot \u8bed\u8a00\u63cf\u8ff0\nprint(flow.render_dot())\n\n# \u4fdd\u5b58\u4e3a PNG \u56fe\u7247 (\u9700\u8981\u5b89\u88c5 graphviz)\nflow.render_dot(saved_file=\"./flow.png\")\n</code></pre> <p> </p>"},{"location":"en/","title":"\ud83d\ude80 Welcome to agnflow","text":"<p>\u26a1 Efficient Python Agent Workflow Engine</p> <p>agnflow is a lightweight, high-performance Python library for building intelligent agent workflows. With its minimalist syntax and powerful features, you can create complex agent systems in just a few lines of code.</p>"},{"location":"en/#key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"en/#minimalist-syntax","title":"\u26a1 Minimalist Syntax","text":"<p>Build agent workflows in 5 lines of code with intuitive operators.</p>"},{"location":"en/#auto-visual-flowcharts","title":"\ud83c\udfa8 Auto Visual Flowcharts","text":"<p>Generate beautiful flowcharts automatically with one line of code.</p>"},{"location":"en/#runtime-dynamic-management","title":"\ud83d\udd04 Runtime Dynamic Management","text":"<p>Add or remove nodes at runtime with symmetric connection/disconnection syntax.</p>"},{"location":"en/#advanced-flow-control","title":"\ud83d\ude80 Advanced Flow Control","text":"<p>Support sync/async mixed execution, branching, looping, and swarm agents.</p>"},{"location":"en/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code>from agnflow import Node, Flow\n\n# Define nodes\ngreet = Node(\"Greet\", exec=lambda state: {\"message\": \"Hello!\"})\nrespond = Node(\"Respond\", exec=lambda state: print(state[\"message\"]))\n\n# Build and run workflow\nflow = Flow(greet &gt;&gt; respond)\nflow.run({\"data\": \"hello\"})\n</code></pre>"},{"location":"en/#learning-path","title":"\ud83d\udcda Learning Path","text":"<ul> <li>\ud83d\ude80 Getting Started - Learn the basics in minutes</li> <li>\ud83e\udde0 Core Concepts - Understand the fundamental concepts</li> <li>\ud83d\udd27 API Reference - Complete API documentation</li> <li>\ud83d\udca1 Examples - Ready-to-run examples</li> </ul>"},{"location":"en/#why-agnflow","title":"\ud83c\udfaf Why agnflow?","text":"<ul> <li>\u26a1 Lightweight: Core code only hundreds of lines</li> <li>\ud83c\udfa8 Visual: Auto-generate beautiful flowcharts</li> <li>\ud83d\udd04 Dynamic: Add/remove nodes at runtime</li> <li>\ud83e\udd16 Agent-Friendly: Native LLM integration support</li> <li>\ud83d\ude80 Fast: Minimal overhead, maximum performance </li> </ul>"},{"location":"en/api-reference/","title":"\ud83d\udd27 API Reference","text":"<p>Complete API documentation for agnflow.</p>"},{"location":"en/api-reference/#core-classes","title":"\ud83e\udde9 Core Classes","text":""},{"location":"en/api-reference/#node","title":"\ud83d\udd27 Node","text":"<p>The fundamental building block of workflows.</p> <pre><code>class Node:\n    def __init__(self, name: str, exec=None, aexec=None, max_retries=1, wait=0)\n</code></pre> <p>Parameters: - <code>name</code> (str): Node identifier - <code>exec</code> (callable): Synchronous execution function - <code>aexec</code> (callable): Asynchronous execution function - <code>max_retries</code> (int): Maximum retry attempts, default 1 - <code>wait</code> (int): Retry interval in seconds, default 0</p> <p>Methods: - <code>run(state)</code>: Execute node synchronously - <code>arun(state)</code>: Execute node asynchronously</p>"},{"location":"en/api-reference/#flow","title":"\ud83c\udf0a Flow","text":"<p>Container for organizing and executing nodes.</p> <pre><code>class Flow:\n    def __init__(self, name: str = None)\n</code></pre> <p>Parameters: - <code>name</code> (str): Flow name</p> <p>Methods: - <code>run(state, entry_action=None, max_steps=None)</code>: Execute flow synchronously - <code>arun(state, entry_action=None, max_steps=None)</code>: Execute flow asynchronously - <code>render_mermaid(saved_file=None, title=None)</code>: Generate Mermaid flowchart - <code>render_dot(saved_file=None)</code>: Generate DOT flowchart</p> <p>Operators: - <code>flow[node]</code>: Add node - <code>flow += node</code>: Add node - <code>flow -= node</code>: Remove node</p>"},{"location":"en/api-reference/#swarm","title":"\ud83d\udc1d Swarm","text":"<p>Multi-agent coordination pattern where all nodes are connected to each other.</p> <pre><code>class Swarm:\n    def __init__(self, name: str = None)\n</code></pre> <p>Parameters: - <code>name</code> (str): Swarm name</p>"},{"location":"en/api-reference/#supervisor","title":"\ud83d\udc68\u200d\ud83d\udcbc Supervisor","text":"<p>Supervision pattern where the first node supervises others.</p> <pre><code>class Supervisor:\n    def __init__(self, name: str = None)\n</code></pre> <p>Parameters: - <code>name</code> (str): Supervisor name</p>"},{"location":"en/api-reference/#connection-operators","title":"\ud83d\udd17 Connection Operators","text":""},{"location":"en/api-reference/#forward-connection","title":"\u27a1\ufe0f Forward Connection","text":"<pre><code>a &gt;&gt; b\n</code></pre> <p>Connects node <code>a</code> to node <code>b</code> in forward direction.</p>"},{"location":"en/api-reference/#reverse-connection","title":"\u2b05\ufe0f Reverse Connection","text":"<pre><code>a &lt;&lt; b\n</code></pre> <p>Connects node <code>b</code> to node <code>a</code> in reverse direction.</p>"},{"location":"en/api-reference/#parallel-connection","title":"\ud83d\udd00 Parallel Connection","text":"<pre><code>a &gt;&gt; [b, c, d]\n</code></pre> <p>Connects node <code>a</code> to multiple nodes <code>b</code>, <code>c</code>, and <code>d</code> in parallel.</p>"},{"location":"en/api-reference/#disconnection","title":"\u274c Disconnection","text":"<pre><code>a - b\na - [b, c, d]\n</code></pre> <p>Removes connections between nodes.</p>"},{"location":"en/api-reference/#execution-functions","title":"\u26a1 Execution Functions","text":""},{"location":"en/api-reference/#synchronous-execution","title":"\ud83d\udd04 Synchronous Execution","text":"<pre><code>def sync_function(state):\n    # Process state\n    return {\"result\": \"processed\"}\n</code></pre> <p>Parameters: - <code>state</code> (dict): Current workflow state</p> <p>Returns: - <code>dict</code>: Updated state - <code>tuple</code>: (action_name, state) for flow control</p>"},{"location":"en/api-reference/#asynchronous-execution","title":"\u26a1 Asynchronous Execution","text":"<pre><code>async def async_function(state):\n    # Async processing\n    await asyncio.sleep(1)\n    return {\"result\": \"async processed\"}\n</code></pre> <p>Parameters: - <code>state</code> (dict): Current workflow state</p> <p>Returns: - <code>dict</code>: Updated state - <code>tuple</code>: (action_name, state) for flow control</p>"},{"location":"en/api-reference/#flow-control-actions","title":"\ud83c\udfae Flow Control Actions","text":""},{"location":"en/api-reference/#exit-flow","title":"\ud83d\udeaa Exit Flow","text":"<pre><code>return \"exit\", state\n</code></pre> <p>Terminates workflow execution.</p>"},{"location":"en/api-reference/#jump-to-node","title":"\ud83c\udfaf Jump to Node","text":"<pre><code>return \"node_name\", state\n</code></pre> <p>Jumps to specified node.</p>"},{"location":"en/api-reference/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"<pre><code>return \"error\", {\"error\": \"error message\"}\n</code></pre> <p>Handles errors in workflow.</p>"},{"location":"en/api-reference/#state-management","title":"\ud83d\udcbe State Management","text":""},{"location":"en/api-reference/#state-structure","title":"\ud83d\udccb State Structure","text":"<pre><code>state = {\n    \"data\": \"workflow data\",\n    \"step\": 0,\n    \"results\": [],\n    \"metadata\": {}\n}\n</code></pre>"},{"location":"en/api-reference/#state-updates","title":"\ud83d\udd04 State Updates","text":"<pre><code>def update_state(state):\n    # Immutable update\n    new_state = {**state, \"step\": state[\"step\"] + 1}\n    return new_state\n</code></pre>"},{"location":"en/api-reference/#visualization","title":"\ufffd\ufffd Visualization","text":""},{"location":"en/api-reference/#mermaid-configuration","title":"\ud83d\udcca Mermaid Configuration","text":"<pre><code>flow.render_mermaid(\n    saved_file=\"workflow.png\",\n    title=\"My Workflow\"\n)\n</code></pre> <p>Parameters: - <code>saved_file</code> (str): Save file path - <code>title</code> (str): Chart title</p>"},{"location":"en/api-reference/#dot-configuration","title":"\ud83d\udd37 DOT Configuration","text":"<pre><code>flow.render_dot(\n    saved_file=\"workflow.dot\"\n)\n</code></pre> <p>Parameters: - <code>saved_file</code> (str): Save file path</p>"},{"location":"en/api-reference/#advanced-features","title":"\ud83d\ude80 Advanced Features","text":""},{"location":"en/api-reference/#dynamic-node-management","title":"\ud83d\udd27 Dynamic Node Management","text":"<pre><code># Add nodes\nflow += Node(\"new_node\", exec=my_function)\n\n# Remove nodes\nflow -= existing_node\n\n# Batch operations\nflow += [node1, node2, node3]\nflow -= [old_node1, old_node2]\n</code></pre>"},{"location":"en/api-reference/#conditional-connections","title":"\ud83c\udfb2 Conditional Connections","text":"<pre><code># Condition-based connections\nif condition:\n    flow = Flow(a &gt;&gt; b)\nelse:\n    flow = Flow(a &gt;&gt; c)\n\n# Dynamic connections\nflow = Flow(a &gt;&gt; (b if condition else c))\n</code></pre>"},{"location":"en/api-reference/#error-handling_1","title":"\ud83d\udee1\ufe0f Error Handling","text":"<pre><code>def robust_function(state):\n    try:\n        # Risky operation\n        result = risky_operation()\n        return {\"success\": True, \"result\": result}\n    except Exception as e:\n        return \"error\", {\"error\": str(e), \"step\": \"robust_function\"}\n\ndef error_handler(state):\n    print(f\"Error in {state['step']}: {state['error']}\")\n    return {\"handled\": True}\n</code></pre>"},{"location":"en/api-reference/#performance-optimization","title":"\u26a1 Performance Optimization","text":""},{"location":"en/api-reference/#async-execution","title":"\ud83d\udd04 Async Execution","text":"<pre><code># Use async execution for better performance\nasync def async_workflow():\n    flow = Flow(async_node1 &gt;&gt; async_node2 &gt;&gt; async_node3)\n    return await flow.arun(initial_state)\n\n# Run async workflow\nresult = asyncio.run(async_workflow())\n</code></pre>"},{"location":"en/api-reference/#parallel-processing","title":"\ud83d\udd00 Parallel Processing","text":"<pre><code># Execute multiple nodes in parallel\nparallel_nodes = [Node(f\"task_{i}\", exec=task_function) for i in range(5)]\nworkflow = Flow(parallel_nodes &gt;&gt; combine_node)\n</code></pre>"},{"location":"en/api-reference/#caching-mechanism","title":"\ud83d\uddc4\ufe0f Caching Mechanism","text":"<pre><code>def cached_function(state):\n    cache_key = hash(str(state))\n    if cache_key in cache:\n        return cache[cache_key]\n\n    result = expensive_operation(state)\n    cache[cache_key] = result\n    return result\n</code></pre>"},{"location":"en/api-reference/#best-practices","title":"\ud83d\udcda Best Practices","text":""},{"location":"en/api-reference/#state-design","title":"\ud83d\udcbe State Design","text":"<pre><code># Good state design\nstate = {\n    \"data\": \"actual data\",\n    \"metadata\": {\n        \"created_at\": \"2024-01-01\",\n        \"version\": \"1.0\"\n    },\n    \"results\": [],\n    \"errors\": []\n}\n\n# Avoid storing large data in state\n# Avoid storing functions or complex objects in state\n</code></pre>"},{"location":"en/api-reference/#error-handling_2","title":"\ud83d\udee1\ufe0f Error Handling","text":"<pre><code>def safe_function(state):\n    try:\n        return process_safely(state)\n    except ValueError as e:\n        return {\"error\": \"Invalid input\", \"details\": str(e)}\n    except Exception as e:\n        return \"error\", {\"error\": \"Unexpected error\", \"details\": str(e)}\n</code></pre>"},{"location":"en/api-reference/#resource-management","title":"\ud83d\udd27 Resource Management","text":"<pre><code>def resource_aware_function(state):\n    # Check resource availability\n    if not check_resources():\n        return \"error\", {\"error\": \"Insufficient resources\"}\n\n    # Use resources\n    result = use_resources(state)\n\n    # Clean up resources\n    cleanup_resources()\n\n    return result\n</code></pre>"},{"location":"en/api-reference/#extension-and-customization","title":"\ud83d\udd0c Extension and Customization","text":""},{"location":"en/api-reference/#custom-node-types","title":"\ud83e\udde9 Custom Node Types","text":"<pre><code>class CustomNode(Node):\n    def __init__(self, name, custom_param, **kwargs):\n        super().__init__(name, **kwargs)\n        self.custom_param = custom_param\n\n    def run(self, state):\n        # Custom logic\n        return {\"custom_result\": self.custom_param}\n</code></pre>"},{"location":"en/api-reference/#custom-flow-types","title":"\ud83c\udf0a Custom Flow Types","text":"<pre><code>class CustomFlow(Flow):\n    def __init__(self, name=None, custom_config=None):\n        super().__init__(name=name)\n        self.custom_config = custom_config\n\n    def custom_method(self):\n        # Custom method\n        pass\n</code></pre>"},{"location":"en/api-reference/#plugin-system","title":"\ud83d\udd0c Plugin System","text":"<pre><code>def register_plugin(plugin_name, plugin_function):\n    \"\"\"Register plugin function\"\"\"\n    plugins[plugin_name] = plugin_function\n\ndef use_plugin(plugin_name, state):\n    \"\"\"Use plugin function\"\"\"\n    if plugin_name in plugins:\n        return plugins[plugin_name](state)\n    else:\n        raise ValueError(f\"Plugin {plugin_name} not found\")\n</code></pre>"},{"location":"en/core-concepts/","title":"\ud83e\udde0 Core Concepts","text":"<p>Learn the fundamental concepts of agnflow.</p>"},{"location":"en/core-concepts/#node-types","title":"\ud83d\udd27 Node Types","text":""},{"location":"en/core-concepts/#basic-nodes","title":"\ud83d\udd27 Basic Nodes","text":"<p>Nodes are the fundamental building blocks of workflows:</p> <pre><code>from agnflow import Node\n\n# Synchronous node\nsync_node = Node(\"sync\", exec=lambda state: {\"result\": \"done\"})\n\n# Asynchronous node\nasync def async_func(state):\n    await asyncio.sleep(1)\n    return {\"result\": \"async done\"}\n\nasync_node = Node(\"async\", aexec=async_func)\n</code></pre>"},{"location":"en/core-concepts/#special-node-types","title":"\ud83c\udfaf Special Node Types","text":""},{"location":"en/core-concepts/#flow-nodes","title":"\ud83c\udf0a Flow Nodes","text":"<p>Container nodes that can hold other nodes:</p> <pre><code>from agnflow import Flow\n\n# Create a flow container\nflow = Flow()\nflow[node1, node2, node3]\n\n# Or create with initial nodes\nflow = Flow(node1 &gt;&gt; node2 &gt;&gt; node3)\n</code></pre>"},{"location":"en/core-concepts/#swarm-nodes","title":"\ud83e\udd16 Swarm Nodes","text":"<p>Special nodes for multi-agent coordination:</p> <pre><code>from agnflow import Swarm, Supervisor\n\n# Swarm - all nodes connected to each other\nswarm = Swarm[node1, node2, node3]\n\n# Supervisor - first node supervises others\nsupervisor = Supervisor[supervisor_node, worker1, worker2]\n</code></pre>"},{"location":"en/core-concepts/#connection-patterns","title":"\ud83d\udd17 Connection Patterns","text":""},{"location":"en/core-concepts/#linear-connections","title":"\u27a1\ufe0f Linear Connections","text":"<pre><code># Forward chaining\na &gt;&gt; b &gt;&gt; c\n\n# Reverse chaining\nc &lt;&lt; b &lt;&lt; a\n</code></pre>"},{"location":"en/core-concepts/#branching-connections","title":"\ud83d\udd00 Branching Connections","text":"<pre><code># Parallel branching\na &gt;&gt; [b, c] &gt;&gt; d\n\n# Conditional branching\na &gt;&gt; (b if condition else c) &gt;&gt; d\n</code></pre>"},{"location":"en/core-concepts/#looping-connections","title":"\ud83d\udd04 Looping Connections","text":"<pre><code># Simple loop\na &gt;&gt; b &gt;&gt; a\n\n# Loop with condition\na &gt;&gt; b &gt;&gt; (a if not_done else c)\n</code></pre>"},{"location":"en/core-concepts/#runtime-dynamic-management","title":"\ud83d\udd04 Runtime Dynamic Management","text":""},{"location":"en/core-concepts/#adding-nodes","title":"\u2795 Adding Nodes","text":"<pre><code># Add single node\nflow += new_node\n\n# Add using bracket syntax\nflow[new_node]\n\n# Add multiple nodes\nflow += [node1, node2, node3]\n</code></pre>"},{"location":"en/core-concepts/#removing-nodes","title":"\u2796 Removing Nodes","text":"<pre><code># Remove single node\nflow -= old_node\n\n# Remove multiple nodes\nflow -= [node1, node2]\n</code></pre>"},{"location":"en/core-concepts/#symmetric-operations","title":"\ud83d\udd17 Symmetric Operations","text":"<pre><code># Build connections\na &gt;&gt; b &gt;&gt; c\na &gt;&gt; [b, c]\n\n# Disconnect symmetrically\na - b - c\na - [b, c]\n</code></pre>"},{"location":"en/core-concepts/#state-management","title":"\ud83d\udcbe State Management","text":""},{"location":"en/core-concepts/#state-flow","title":"\ud83c\udf0a State Flow","text":"<p>State flows through nodes and can be modified:</p> <pre><code>def process_node(state):\n    # Modify state\n    state[\"processed\"] = True\n    state[\"timestamp\"] = time.time()\n    return state\n\nnode = Node(\"process\", exec=process_node)\n</code></pre>"},{"location":"en/core-concepts/#state-persistence","title":"\ud83d\udcbe State Persistence","text":"<p>State is automatically passed between nodes:</p> <pre><code># Initial state\ninitial_state = {\"data\": \"hello\", \"step\": 0}\n\n# State flows through nodes\nnode1 = Node(\"step1\", exec=lambda s: {**s, \"step\": s[\"step\"] + 1})\nnode2 = Node(\"step2\", exec=lambda s: {**s, \"step\": s[\"step\"] + 1})\n\nflow = Flow(node1 &gt;&gt; node2)\nresult = flow.run(initial_state)\n# result: {\"data\": \"hello\", \"step\": 2}\n</code></pre>"},{"location":"en/core-concepts/#execution-control","title":"\ud83c\udfae Execution Control","text":""},{"location":"en/core-concepts/#entry-points","title":"\ud83d\udeaa Entry Points","text":"<p>Control where execution starts:</p> <pre><code># Start from specific node\nflow.run(state, entry_action=\"node_name\")\n\n# Start from first node (default)\nflow.run(state)\n</code></pre>"},{"location":"en/core-concepts/#execution-limits","title":"\u23f1\ufe0f Execution Limits","text":"<pre><code># Limit execution steps\nflow.run(state, max_steps=10)\n\n# Async execution with limits\nawait flow.arun(state, max_steps=10)\n</code></pre>"},{"location":"en/core-concepts/#visualization","title":"\ud83c\udfa8 Visualization","text":""},{"location":"en/core-concepts/#mermaid-flowcharts","title":"\ud83d\udcca Mermaid Flowcharts","text":"<pre><code># Generate Mermaid code\nmermaid = flow.render_mermaid()\n\n# Save as image\nflow.render_mermaid(saved_file=\"workflow.png\", title=\"My Workflow\")\n</code></pre>"},{"location":"en/core-concepts/#dot-flowcharts","title":"\ud83d\udd37 DOT Flowcharts","text":"<pre><code># Generate DOT code\ndot = flow.render_dot()\n\n# Save as image\nflow.render_dot(saved_file=\"workflow.png\")\n</code></pre>"},{"location":"en/core-concepts/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"en/core-concepts/#human-in-the-loop-hitl","title":"Human-in-the-Loop (HITL)","text":"<pre><code>from agnflow.agent.hitl.cli import human_in_the_loop\n\ndef review_node(state):\n    result, approved = human_in_the_loop(\n        \"Please review this data\", \n        input_data=state\n    )\n    if approved:\n        return {\"reviewed\": True, \"result\": result}\n    else:\n        return \"exit\", {\"reviewed\": False}\n\nreview = Node(\"review\", exec=review_node)\n</code></pre>"},{"location":"en/core-concepts/#error-handling","title":"Error Handling","text":"<pre><code>def robust_node(state):\n    try:\n        # Your logic here\n        return {\"success\": True}\n    except Exception as e:\n        return \"error\", {\"error\": str(e)}\n\nnode = Node(\"robust\", exec=robust_node)\n</code></pre>"},{"location":"en/core-concepts/#conditional-execution","title":"Conditional Execution","text":"<pre><code>def conditional_node(state):\n    if state.get(\"condition\"):\n        return \"branch_a\"\n    else:\n        return \"branch_b\"\n\nnode = Node(\"conditional\", exec=conditional_node)\n</code></pre>"},{"location":"en/examples/","title":"\ud83d\udca1 Examples","text":"<p>Practical examples demonstrating agnflow capabilities.</p>"},{"location":"en/examples/#basic-examples","title":"\ud83c\udfaf Basic Examples","text":""},{"location":"en/examples/#simple-linear-workflow","title":"\ud83d\udcdd Simple Linear Workflow","text":"<pre><code>from agnflow import Node, Flow\n\n# Define nodes\ndef step1(state):\n    return {\"data\": \"processed\", \"step\": 1}\n\ndef step2(state):\n    return {\"data\": state[\"data\"], \"step\": 2, \"final\": True}\n\n# Create nodes\nnode1 = Node(\"step1\", exec=step1)\nnode2 = Node(\"step2\", exec=step2)\n\n# Build workflow\nworkflow = Flow(node1 &gt;&gt; node2)\n\n# Execute\nresult = workflow.run({\"initial\": \"data\"})\nprint(result)  # {'data': 'processed', 'step': 2, 'final': True}\n</code></pre>"},{"location":"en/examples/#parallel-processing","title":"\ud83d\udd04 Parallel Processing","text":"<pre><code>from agnflow import Node, Flow\n\ndef process_a(state):\n    return {\"result_a\": \"A processed\"}\n\ndef process_b(state):\n    return {\"result_b\": \"B processed\"}\n\ndef combine(state):\n    return {\n        **state,\n        \"combined\": f\"{state['result_a']} + {state['result_b']}\"\n    }\n\n# Create workflow with parallel branches\na = Node(\"process_a\", exec=process_a)\nb = Node(\"process_b\", exec=process_b)\nc = Node(\"combine\", exec=combine)\n\nworkflow = Flow(a &gt;&gt; [b, c] &gt;&gt; c)\nresult = workflow.run({})\n</code></pre>"},{"location":"en/examples/#advanced-examples","title":"\ud83d\ude80 Advanced Examples","text":""},{"location":"en/examples/#dynamic-node-management","title":"\ud83d\udd27 Dynamic Node Management","text":"<pre><code>from agnflow import Node, Flow\n\ndef add_data(state):\n    return {\"data\": \"new data\"}\n\ndef process_data(state):\n    return {\"processed\": state[\"data\"]}\n\n# Create initial workflow\nworkflow = Flow()\nworkflow[Node(\"start\", exec=lambda s: {\"step\": \"started\"})]\n\n# Add nodes dynamically\nworkflow += Node(\"add\", exec=add_data)\nworkflow += Node(\"process\", exec=process_data)\n\n# Connect nodes\nworkflow[\"start\"] &gt;&gt; workflow[\"add\"] &gt;&gt; workflow[\"process\"]\n\n# Execute\nresult = workflow.run({})\n</code></pre>"},{"location":"en/examples/#conditional-workflows","title":"\ud83c\udfb2 Conditional Workflows","text":"<pre><code>from agnflow import Node, Flow\n\ndef check_condition(state):\n    if state.get(\"condition\"):\n        return \"branch_a\"\n    else:\n        return \"branch_b\"\n\ndef branch_a(state):\n    return {\"path\": \"A\", \"result\": \"A processed\"}\n\ndef branch_b(state):\n    return {\"path\": \"B\", \"result\": \"B processed\"}\n\ndef finalize(state):\n    return {\"final\": f\"Completed via {state['path']}\"}\n\n# Create workflow with conditional branching\ncheck = Node(\"check\", exec=check_condition)\na = Node(\"branch_a\", exec=branch_a)\nb = Node(\"branch_b\", exec=branch_b)\nfinal = Node(\"finalize\", exec=finalize)\n\nworkflow = Flow(check &gt;&gt; (a if True else b) &gt;&gt; final)\nresult = workflow.run({\"condition\": True})\n</code></pre>"},{"location":"en/examples/#human-in-the-loop","title":"\ud83d\udc65 Human-in-the-Loop","text":"<pre><code>from agnflow import Node, Flow\nfrom agnflow.agent.hitl.cli import human_in_the_loop\n\ndef generate_content(state):\n    return {\"content\": \"Generated content for review\"}\n\ndef human_review(state):\n    result, approved = human_in_the_loop(\n        \"Please review this content:\",\n        input_data=state[\"content\"],\n        options=[\"approve\", \"reject\", \"modify\"]\n    )\n\n    if approved:\n        return {\"reviewed\": True, \"content\": result}\n    else:\n        return \"exit\", {\"reviewed\": False}\n\ndef publish(state):\n    return {\"published\": True, \"content\": state[\"content\"]}\n\n# Create HITL workflow\ngenerate = Node(\"generate\", exec=generate_content)\nreview = Node(\"review\", exec=human_review)\npublish = Node(\"publish\", exec=publish)\n\nworkflow = Flow(generate &gt;&gt; review &gt;&gt; publish)\nresult = workflow.run({})\n</code></pre>"},{"location":"en/examples/#multi-agent-examples","title":"\ud83e\udd16 Multi-Agent Examples","text":""},{"location":"en/examples/#swarm-pattern","title":"\ud83d\udc1d Swarm Pattern","text":"<pre><code>from agnflow import Node, Swarm\n\ndef agent1(state):\n    return {\"agent1_result\": \"Task 1 completed\"}\n\ndef agent2(state):\n    return {\"agent2_result\": \"Task 2 completed\"}\n\ndef agent3(state):\n    return {\"agent3_result\": \"Task 3 completed\"}\n\n# Create swarm of agents\nagent1_node = Node(\"agent1\", exec=agent1)\nagent2_node = Node(\"agent2\", exec=agent2)\nagent3_node = Node(\"agent3\", exec=agent3)\n\nswarm = Swarm[agent1_node, agent2_node, agent3_node]\nresult = swarm.run({\"task\": \"collaborative task\"})\n</code></pre>"},{"location":"en/examples/#supervisor-pattern","title":"\ud83d\udc68\u200d\ud83d\udcbc Supervisor Pattern","text":"<pre><code>from agnflow import Node, Supervisor\n\ndef supervisor(state):\n    # Supervisor coordinates workers\n    return {\"supervision\": \"coordinating\", \"tasks\": [\"task1\", \"task2\"]}\n\ndef worker1(state):\n    return {\"worker1_result\": \"Task 1 done\"}\n\ndef worker2(state):\n    return {\"worker2_result\": \"Task 2 done\"}\n\n# Create supervisor-worker pattern\nsupervisor_node = Node(\"supervisor\", exec=supervisor)\nworker1_node = Node(\"worker1\", exec=worker1)\nworker2_node = Node(\"worker2\", exec=worker2)\n\nsupervisor_flow = Supervisor[supervisor_node, worker1_node, worker2_node]\nresult = supervisor_flow.run({\"project\": \"supervised project\"})\n</code></pre>"},{"location":"en/examples/#error-handling-examples","title":"\u26a0\ufe0f Error Handling Examples","text":""},{"location":"en/examples/#robust-workflow","title":"\ud83d\udee1\ufe0f Robust Workflow","text":"<pre><code>from agnflow import Node, Flow\n\ndef risky_operation(state):\n    try:\n        # Risky operation that might fail\n        result = 1 / 0\n        return {\"result\": result}\n    except Exception as e:\n        return \"error\", {\"error\": str(e)}\n\ndef error_handler(state):\n    print(f\"Handling error: {state['error']}\")\n    return {\"handled\": True, \"error\": state[\"error\"]}\n\ndef success_handler(state):\n    return {\"success\": True, \"result\": state[\"result\"]}\n\n# Create error handling workflow\nrisky = Node(\"risky\", exec=risky_operation)\nerror = Node(\"error\", exec=error_handler)\nsuccess = Node(\"success\", exec=success_handler)\n\nworkflow = Flow(risky &gt;&gt; (error if \"error\" in state else success))\nresult = workflow.run({})\n</code></pre>"},{"location":"en/examples/#retry-mechanism","title":"\ud83d\udd04 Retry Mechanism","text":"<pre><code>from agnflow import Node, Flow\nimport time\n\ndef retry_operation(state, max_retries=3):\n    retries = state.get(\"retries\", 0)\n\n    if retries &gt;= max_retries:\n        return \"error\", {\"error\": \"Max retries exceeded\"}\n\n    try:\n        # Simulate operation that might fail\n        if time.time() % 2 &lt; 1:  # 50% failure rate\n            raise Exception(\"Random failure\")\n\n        return {\"success\": True, \"attempts\": retries + 1}\n    except Exception as e:\n        return {\n            \"retries\": retries + 1,\n            \"last_error\": str(e)\n        }\n\ndef retry_node(state):\n    return retry_operation(state)\n\n# Create retry workflow\nretry = Node(\"retry\", exec=retry_node)\nworkflow = Flow(retry &gt;&gt; retry)  # Self-loop for retries\n\nresult = workflow.run({\"retries\": 0})\n</code></pre>"},{"location":"en/examples/#async-examples","title":"\u26a1 Async Examples","text":""},{"location":"en/examples/#async-nodes","title":"\ud83d\udd04 Async Nodes","text":"<pre><code>import asyncio\nfrom agnflow import Node, Flow\n\nasync def async_operation(state):\n    await asyncio.sleep(1)\n    return {\"async_result\": \"completed\"}\n\nasync def async_combine(state):\n    await asyncio.sleep(0.5)\n    return {\"combined\": f\"Async: {state['async_result']}\"}\n\n# Create async workflow\nasync_node = Node(\"async_op\", aexec=async_operation)\nasync_combine_node = Node(\"async_combine\", aexec=async_combine)\n\nworkflow = Flow(async_node &gt;&gt; async_combine_node)\n\n# Execute asynchronously\nresult = asyncio.run(workflow.arun({}))\n</code></pre>"},{"location":"en/examples/#mixed-syncasync","title":"\ud83d\udd00 Mixed Sync/Async","text":"<pre><code>import asyncio\nfrom agnflow import Node, Flow\n\ndef sync_operation(state):\n    return {\"sync_data\": \"processed\"}\n\nasync def async_operation(state):\n    await asyncio.sleep(1)\n    return {\"async_data\": \"processed\"}\n\ndef combine_results(state):\n    return {\n        \"combined\": f\"{state['sync_data']} + {state['async_data']}\"\n    }\n\n# Create mixed workflow\nsync_node = Node(\"sync\", exec=sync_operation)\nasync_node = Node(\"async\", aexec=async_operation)\ncombine_node = Node(\"combine\", exec=combine_results)\n\nworkflow = Flow(sync_node &gt;&gt; async_node &gt;&gt; combine_node)\nresult = asyncio.run(workflow.arun({}))\n</code></pre>"},{"location":"en/examples/#visualization-examples","title":"\ud83c\udfa8 Visualization Examples","text":""},{"location":"en/examples/#generate-flowcharts","title":"\ud83d\udcca Generate Flowcharts","text":"<pre><code>from agnflow import Node, Flow\n\ndef step1(state):\n    return {\"step\": 1}\n\ndef step2(state):\n    return {\"step\": 2}\n\ndef step3(state):\n    return {\"step\": 3}\n\n# Create complex workflow\na = Node(\"step1\", exec=step1)\nb = Node(\"step2\", exec=step2)\nc = Node(\"step3\", exec=step3)\n\nworkflow = Flow(a &gt;&gt; [b, c] &gt;&gt; b)\n\n# Generate Mermaid chart\nworkflow.render_mermaid(saved_file=\"workflow.png\", title=\"Complex Workflow\")\n\n# Generate DOT chart\nworkflow.render_dot(saved_file=\"workflow.dot\")\n</code></pre>"},{"location":"en/examples/#state-management-examples","title":"\ud83d\udcbe State Management Examples","text":""},{"location":"en/examples/#complex-state-operations","title":"\ud83d\udd22 Complex State Operations","text":"<pre><code>from agnflow import Node, Flow\n\ndef initialize_state(state):\n    return {\n        **state,\n        \"counter\": 0,\n        \"history\": [],\n        \"metadata\": {\"created\": \"now\"}\n    }\n\ndef increment_counter(state):\n    new_counter = state[\"counter\"] + 1\n    new_history = state[\"history\"] + [new_counter]\n\n    return {\n        **state,\n        \"counter\": new_counter,\n        \"history\": new_history\n    }\n\ndef analyze_history(state):\n    history = state[\"history\"]\n    return {\n        **state,\n        \"analysis\": {\n            \"total\": len(history),\n            \"sum\": sum(history),\n            \"average\": sum(history) / len(history) if history else 0\n        }\n    }\n\n# Create state management workflow\ninit = Node(\"init\", exec=initialize_state)\nincrement = Node(\"increment\", exec=increment_counter)\nanalyze = Node(\"analyze\", exec=analyze_history)\n\nworkflow = Flow(init &gt;&gt; increment &gt;&gt; increment &gt;&gt; increment &gt;&gt; analyze)\nresult = workflow.run({})\n</code></pre>"},{"location":"en/examples/#state-persistence","title":"\ud83d\udcbe State Persistence","text":"<pre><code>import json\nfrom agnflow import Node, Flow\n\ndef save_state(state):\n    with open(\"workflow_state.json\", \"w\") as f:\n        json.dump(state, f)\n    return state\n\ndef load_state(state):\n    try:\n        with open(\"workflow_state.json\", \"r\") as f:\n            loaded_state = json.load(f)\n        return {**state, **loaded_state}\n    except FileNotFoundError:\n        return state\n\ndef process_with_persistence(state):\n    return {\"processed\": True, \"data\": state.get(\"data\", \"default\")}\n\n# Create persistence workflow\nload = Node(\"load\", exec=load_state)\nprocess = Node(\"process\", exec=process_with_persistence)\nsave = Node(\"save\", exec=save_state)\n\nworkflow = Flow(load &gt;&gt; process &gt;&gt; save)\nresult = workflow.run({\"data\": \"important data\"})\n</code></pre>"},{"location":"en/examples/#performance-optimization-examples","title":"\u26a1 Performance Optimization Examples","text":""},{"location":"en/examples/#caching-mechanism","title":"\ud83d\uddc4\ufe0f Caching Mechanism","text":"<pre><code>from agnflow import Node, Flow\nimport hashlib\nimport json\n\nclass Cache:\n    def __init__(self):\n        self._cache = {}\n\n    def get(self, key):\n        return self._cache.get(key)\n\n    def set(self, key, value):\n        self._cache[key] = value\n\ncache = Cache()\n\ndef expensive_operation(state):\n    # Generate cache key\n    cache_key = hashlib.md5(\n        json.dumps(state, sort_keys=True).encode()\n    ).hexdigest()\n\n    # Check cache\n    cached_result = cache.get(cache_key)\n    if cached_result:\n        return {\"result\": cached_result, \"cached\": True}\n\n    # Execute expensive operation\n    result = sum(i**2 for i in range(10000))\n\n    # Cache result\n    cache.set(cache_key, result)\n\n    return {\"result\": result, \"cached\": False}\n\n# Create caching workflow\nexpensive = Node(\"expensive\", exec=expensive_operation)\nworkflow = Flow(expensive)\n\n# First execution (no cache)\nresult1 = workflow.run({\"input\": \"data1\"})\n\n# Second execution (with cache)\nresult2 = workflow.run({\"input\": \"data1\"})\n</code></pre>"},{"location":"en/examples/#parallel-optimization","title":"\ud83d\udd04 Parallel Optimization","text":"<pre><code>from agnflow import Node, Flow\nimport asyncio\n\nasync def parallel_task1(state):\n    await asyncio.sleep(2)\n    return {\"task1\": \"completed\"}\n\nasync def parallel_task2(state):\n    await asyncio.sleep(3)\n    return {\"task2\": \"completed\"}\n\nasync def parallel_task3(state):\n    await asyncio.sleep(1)\n    return {\"task3\": \"completed\"}\n\ndef combine_parallel_results(state):\n    return {\n        \"all_tasks\": [\n            state.get(\"task1\"),\n            state.get(\"task2\"),\n            state.get(\"task3\")\n        ]\n    }\n\n# Create parallel optimization workflow\ntask1 = Node(\"task1\", aexec=parallel_task1)\ntask2 = Node(\"task2\", aexec=parallel_task2)\ntask3 = Node(\"task3\", aexec=parallel_task3)\ncombine = Node(\"combine\", exec=combine_parallel_results)\n\n# Execute all tasks in parallel\nworkflow = Flow([task1, task2, task3] &gt;&gt; combine)\nresult = asyncio.run(workflow.arun({}))\n</code></pre>"},{"location":"en/getting-started/","title":"\ud83d\ude80 Getting Started","text":"<p>Get up and running with agnflow in minutes.</p>"},{"location":"en/getting-started/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install agnflow\n</code></pre>"},{"location":"en/getting-started/#basic-usage","title":"\ud83c\udfaf Basic Usage","text":""},{"location":"en/getting-started/#1-import-and-create-nodes","title":"1\ufe0f\u20e3 Import and Create Nodes","text":"<pre><code>from agnflow import Node, Flow\n\n# Create a synchronous node\ngreet = Node(\"Greet\", exec=lambda state: {\"message\": \"Hello, World!\"})\n\n# Create an asynchronous node\nasync def async_respond(state):\n    await asyncio.sleep(1)\n    print(state[\"message\"])\n    return {\"status\": \"done\"}\n\nrespond = Node(\"Respond\", aexec=async_respond)\n</code></pre>"},{"location":"en/getting-started/#2-connect-nodes","title":"2\ufe0f\u20e3 Connect Nodes","text":"<pre><code># Linear connection\nflow = Flow(greet &gt;&gt; respond)\n\n# Or connect step by step\nflow = Flow()\nflow.add_node(greet)\nflow.add_node(respond)\ngreet &gt;&gt; respond\n</code></pre>"},{"location":"en/getting-started/#3-run-the-workflow","title":"3\ufe0f\u20e3 Run the Workflow","text":"<pre><code># Synchronous execution\nstate = {\"data\": \"hello\"}\nresult = flow.run(state)\n\n# Asynchronous execution\nimport asyncio\nresult = asyncio.run(flow.arun(state))\n</code></pre>"},{"location":"en/getting-started/#core-concepts","title":"\ud83e\udde0 Core Concepts","text":""},{"location":"en/getting-started/#nodes","title":"\ud83d\udd27 Nodes","text":"<p>Nodes are the building blocks of your workflow. Each node can:</p> <ul> <li>Execute synchronous or asynchronous functions</li> <li>Process and modify state</li> <li>Return results that affect the next node</li> </ul> <pre><code># Synchronous node\nnode = Node(\"name\", exec=lambda state: {\"key\": \"value\"})\n\n# Asynchronous node\nnode = Node(\"name\", aexec=async_function)\n\n# Node with custom name\nnode = Node(\"custom_name\", exec=function)\n</code></pre>"},{"location":"en/getting-started/#connections","title":"\ud83d\udd17 Connections","text":"<p>Connect nodes using the <code>&gt;&gt;</code> operator:</p> <pre><code># Linear connection\na &gt;&gt; b &gt;&gt; c\n\n# Branching\na &gt;&gt; [b, c] &gt;&gt; d\n\n# Reverse connection\nc &lt;&lt; b &lt;&lt; a\n</code></pre>"},{"location":"en/getting-started/#flows","title":"\ud83c\udf0a Flows","text":"<p>Flows are containers that manage nodes and their connections:</p> <pre><code># Create flow with nodes\nflow = Flow(node1 &gt;&gt; node2 &gt;&gt; node3)\n\n# Add nodes to existing flow\nflow += new_node\nflow[another_node]\n\n# Remove nodes\nflow -= node_to_remove\n</code></pre>"},{"location":"en/getting-started/#advanced-features","title":"\ud83d\ude80 Advanced Features","text":""},{"location":"en/getting-started/#runtime-node-management","title":"\ud83d\udd04 Runtime Node Management","text":"<p>Add or remove nodes at runtime:</p> <pre><code># Add nodes\nflow += new_node\nflow[another_node]\nflow += [node1, node2, node3]\n\n# Remove nodes\nflow -= old_node\nflow -= [node1, node2]\n</code></pre>"},{"location":"en/getting-started/#symmetric-connectiondisconnection","title":"\ud83d\udd17 Symmetric Connection/Disconnection","text":"<pre><code># Build connections\na &gt;&gt; b &gt;&gt; c\na &gt;&gt; [b, c]\n\n# Disconnect symmetrically\na - b - c\na - [b, c]\n</code></pre>"},{"location":"en/getting-started/#visual-flowcharts","title":"\ud83c\udfa8 Visual Flowcharts","text":"<p>Generate beautiful flowcharts:</p> <pre><code># Generate Mermaid format\nmermaid_code = flow.render_mermaid()\n\n# Save as image\nflow.render_mermaid(saved_file=\"workflow.png\")\n\n# Generate DOT format\ndot_code = flow.render_dot()\n</code></pre>"},{"location":"en/getting-started/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>\ud83e\udde0 Core Concepts - Learn about advanced features</li> <li>\ud83d\udd27 API Reference - Complete API documentation</li> <li>\ud83d\udca1 Examples - See more examples </li> </ul>"},{"location":"zh/","title":"\ud83d\ude80 \u6b22\u8fce\u4f7f\u7528 agnflow","text":"<p>\u26a1 \u9ad8\u6548 Python \u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u5f15\u64ce</p> <p>agnflow \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u9ad8\u6027\u80fd\u7684 Python \u5e93\uff0c\u7528\u4e8e\u6784\u5efa\u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u3002\u51ed\u501f\u5176\u6781\u7b80\u7684\u8bed\u6cd5\u548c\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u7528\u51e0\u884c\u4ee3\u7801\u521b\u5efa\u590d\u6742\u7684\u667a\u80fd\u4f53\u7cfb\u7edf\u3002</p>"},{"location":"zh/#_1","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":""},{"location":"zh/#_2","title":"\u26a1 \u6781\u7b80\u8bed\u6cd5","text":"<p>\u4f7f\u7528\u76f4\u89c2\u7684\u64cd\u4f5c\u7b26\uff0c5\u884c\u4ee3\u7801\u6784\u5efa\u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/#_3","title":"\ud83c\udfa8 \u81ea\u52a8\u53ef\u89c6\u5316\u6d41\u7a0b\u56fe","text":"<p>\u4e00\u884c\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u7cbe\u7f8e\u7684\u6d41\u7a0b\u56fe\u3002</p>"},{"location":"zh/#_4","title":"\ud83d\udd04 \u8fd0\u884c\u65f6\u52a8\u6001\u7ba1\u7406","text":"<p>\u4f7f\u7528\u5bf9\u79f0\u7684\u8fde\u63a5/\u65ad\u5f00\u8bed\u6cd5\uff0c\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\u3002</p>"},{"location":"zh/#_5","title":"\ud83d\ude80 \u9ad8\u7ea7\u6d41\u7a0b\u63a7\u5236","text":"<p>\u652f\u6301\u540c\u6b65/\u5f02\u6b65\u6df7\u5408\u6267\u884c\u3001\u5206\u652f\u3001\u5faa\u73af\u548c\u8702\u7fa4\u667a\u80fd\u4f53\u3002</p>"},{"location":"zh/#_6","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":"<pre><code>from agnflow import Node, Flow\n\n# \u5b9a\u4e49\u8282\u70b9\ngreet = Node(\"Greet\", exec=lambda state: {\"message\": \"Hello!\"})\nrespond = Node(\"Respond\", exec=lambda state: print(state[\"message\"]))\n\n# \u6784\u5efa\u5e76\u8fd0\u884c\u5de5\u4f5c\u6d41\nflow = Flow(greet &gt;&gt; respond)\nflow.run({\"data\": \"hello\"})\n</code></pre>"},{"location":"zh/#_7","title":"\ud83d\udcda \u5b66\u4e60\u8def\u5f84","text":"<ul> <li>\ud83d\ude80 \u5feb\u901f\u5f00\u59cb - \u51e0\u5206\u949f\u5185\u5b66\u4e60\u57fa\u7840\u77e5\u8bc6</li> <li>\ud83e\udde0 \u6838\u5fc3\u6982\u5ff5 - \u7406\u89e3\u57fa\u672c\u6982\u5ff5</li> <li>\ud83d\udd27 API \u53c2\u8003 - \u5b8c\u6574\u7684 API \u6587\u6863</li> <li>\ud83d\udca1 \u793a\u4f8b - \u5373\u7528\u793a\u4f8b</li> </ul>"},{"location":"zh/#agnflow_1","title":"\ud83c\udfaf \u4e3a\u4ec0\u4e48\u9009\u62e9 agnflow\uff1f","text":"<ul> <li>\u26a1 \u8f7b\u91cf\u7ea7 - \u6838\u5fc3\u4ee3\u7801\u4ec5\u6570\u767e\u884c</li> <li>\ud83c\udfa8 \u53ef\u89c6\u5316 - \u81ea\u52a8\u751f\u6210\u7cbe\u7f8e\u6d41\u7a0b\u56fe</li> <li>\ud83d\udd04 \u52a8\u6001\u6027 - \u8fd0\u884c\u65f6\u52a8\u6001\u589e\u5220\u8282\u70b9</li> <li>\ud83e\udd16 \u667a\u80fd\u4f53\u53cb\u597d - \u539f\u751f LLM \u96c6\u6210\u652f\u6301</li> <li>\ud83d\ude80 \u5feb\u901f - \u6700\u5c0f\u5f00\u9500\uff0c\u6700\u5927\u6027\u80fd </li> </ul>"},{"location":"zh/api-reference/","title":"\ud83d\udd27 API \u53c2\u8003","text":"<p>agnflow \u7684\u5b8c\u6574 API \u6587\u6863\u3002</p>"},{"location":"zh/api-reference/#_1","title":"\ud83e\udde9 \u6838\u5fc3\u7c7b","text":""},{"location":"zh/api-reference/#node","title":"\ud83d\udd27 Node","text":"<p>\u5de5\u4f5c\u6d41\u7684\u57fa\u672c\u6784\u5efa\u5757\u3002</p> <pre><code>class Node:\n    def __init__(self, name: str, exec=None, aexec=None, max_retries=1, wait=0)\n</code></pre> <p>\u53c2\u6570: - <code>name</code> (str): \u8282\u70b9\u6807\u8bc6\u7b26 - <code>exec</code> (callable): \u540c\u6b65\u6267\u884c\u51fd\u6570 - <code>aexec</code> (callable): \u5f02\u6b65\u6267\u884c\u51fd\u6570 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba41 - <code>wait</code> (int): \u91cd\u8bd5\u95f4\u9694\u65f6\u95f4\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40</p> <p>\u65b9\u6cd5: - <code>run(state)</code>: \u540c\u6b65\u6267\u884c\u8282\u70b9 - <code>arun(state)</code>: \u5f02\u6b65\u6267\u884c\u8282\u70b9</p>"},{"location":"zh/api-reference/#flow","title":"\ud83c\udf0a Flow","text":"<p>\u7528\u4e8e\u7ec4\u7ec7\u548c\u6267\u884c\u8282\u70b9\u7684\u5bb9\u5668\u3002</p> <pre><code>class Flow:\n    def __init__(self, name: str = None)\n</code></pre> <p>\u53c2\u6570: - <code>name</code> (str): \u5de5\u4f5c\u6d41\u540d\u79f0</p> <p>\u65b9\u6cd5: - <code>run(state, entry_action=None, max_steps=None)</code>: \u540c\u6b65\u6267\u884c\u5de5\u4f5c\u6d41 - <code>arun(state, entry_action=None, max_steps=None)</code>: \u5f02\u6b65\u6267\u884c\u5de5\u4f5c\u6d41 - <code>render_mermaid(saved_file=None, title=None)</code>: \u751f\u6210 Mermaid \u6d41\u7a0b\u56fe - <code>render_dot(saved_file=None)</code>: \u751f\u6210 DOT \u6d41\u7a0b\u56fe</p> <p>\u64cd\u4f5c\u7b26: - <code>flow[node]</code>: \u6dfb\u52a0\u8282\u70b9 - <code>flow += node</code>: \u6dfb\u52a0\u8282\u70b9 - <code>flow -= node</code>: \u79fb\u9664\u8282\u70b9</p>"},{"location":"zh/api-reference/#swarm","title":"\ud83d\udc1d Swarm","text":"<p>\u591a\u667a\u80fd\u4f53\u534f\u8c03\u6a21\u5f0f\uff0c\u6240\u6709\u8282\u70b9\u90fd\u76f8\u4e92\u8fde\u63a5\u3002</p> <pre><code>class Swarm:\n    def __init__(self, name: str = None)\n</code></pre> <p>\u53c2\u6570: - <code>name</code> (str): \u8702\u7fa4\u540d\u79f0</p>"},{"location":"zh/api-reference/#supervisor","title":"\ud83d\udc68\u200d\ud83d\udcbc Supervisor","text":"<p>\u76d1\u7763\u6a21\u5f0f\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u76d1\u7763\u5176\u4ed6\u8282\u70b9\u3002</p> <pre><code>class Supervisor:\n    def __init__(self, name: str = None)\n</code></pre> <p>\u53c2\u6570: - <code>name</code> (str): \u76d1\u7763\u8005\u540d\u79f0</p>"},{"location":"zh/api-reference/#_2","title":"\ud83d\udd17 \u8fde\u63a5\u64cd\u4f5c\u7b26","text":""},{"location":"zh/api-reference/#_3","title":"\u27a1\ufe0f \u524d\u5411\u8fde\u63a5","text":"<pre><code>a &gt;&gt; b\n</code></pre> <p>\u5c06\u8282\u70b9 <code>a</code> \u8fde\u63a5\u5230\u8282\u70b9 <code>b</code>\uff0c\u65b9\u5411\u5411\u524d\u3002</p>"},{"location":"zh/api-reference/#_4","title":"\u2b05\ufe0f \u53cd\u5411\u8fde\u63a5","text":"<pre><code>a &lt;&lt; b\n</code></pre> <p>\u5c06\u8282\u70b9 <code>b</code> \u8fde\u63a5\u5230\u8282\u70b9 <code>a</code>\uff0c\u65b9\u5411\u5411\u540e\u3002</p>"},{"location":"zh/api-reference/#_5","title":"\ud83d\udd00 \u5e76\u884c\u8fde\u63a5","text":"<pre><code>a &gt;&gt; [b, c, d]\n</code></pre> <p>\u5c06\u8282\u70b9 <code>a</code> \u5e76\u884c\u8fde\u63a5\u5230\u591a\u4e2a\u8282\u70b9 <code>b</code>\u3001<code>c</code> \u548c <code>d</code>\u3002</p>"},{"location":"zh/api-reference/#_6","title":"\u274c \u65ad\u5f00\u8fde\u63a5","text":"<pre><code>a - b\na - [b, c, d]\n</code></pre> <p>\u79fb\u9664\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u3002</p>"},{"location":"zh/api-reference/#_7","title":"\u26a1 \u6267\u884c\u51fd\u6570","text":""},{"location":"zh/api-reference/#_8","title":"\ud83d\udd04 \u540c\u6b65\u6267\u884c","text":"<pre><code>def sync_function(state):\n    # \u5904\u7406\u72b6\u6001\n    return {\"result\": \"processed\"}\n</code></pre> <p>\u53c2\u6570: - <code>state</code> (dict): \u5f53\u524d\u5de5\u4f5c\u6d41\u72b6\u6001</p> <p>\u8fd4\u56de: - <code>dict</code>: \u66f4\u65b0\u540e\u7684\u72b6\u6001 - <code>tuple</code>: (action_name, state) \u7528\u4e8e\u6d41\u7a0b\u63a7\u5236</p>"},{"location":"zh/api-reference/#_9","title":"\u26a1 \u5f02\u6b65\u6267\u884c","text":"<pre><code>async def async_function(state):\n    # \u5f02\u6b65\u5904\u7406\n    await asyncio.sleep(1)\n    return {\"result\": \"async processed\"}\n</code></pre> <p>\u53c2\u6570: - <code>state</code> (dict): \u5f53\u524d\u5de5\u4f5c\u6d41\u72b6\u6001</p> <p>\u8fd4\u56de: - <code>dict</code>: \u66f4\u65b0\u540e\u7684\u72b6\u6001 - <code>tuple</code>: (action_name, state) \u7528\u4e8e\u6d41\u7a0b\u63a7\u5236</p>"},{"location":"zh/api-reference/#_10","title":"\ud83c\udfae \u6d41\u7a0b\u63a7\u5236\u52a8\u4f5c","text":""},{"location":"zh/api-reference/#_11","title":"\ud83d\udeaa \u9000\u51fa\u5de5\u4f5c\u6d41","text":"<pre><code>return \"exit\", state\n</code></pre> <p>\u7ec8\u6b62\u5de5\u4f5c\u6d41\u6267\u884c\u3002</p>"},{"location":"zh/api-reference/#_12","title":"\ud83c\udfaf \u8df3\u8f6c\u5230\u8282\u70b9","text":"<pre><code>return \"node_name\", state\n</code></pre> <p>\u8df3\u8f6c\u5230\u6307\u5b9a\u8282\u70b9\u3002</p>"},{"location":"zh/api-reference/#_13","title":"\u26a0\ufe0f \u9519\u8bef\u5904\u7406","text":"<pre><code>return \"error\", {\"error\": \"error message\"}\n</code></pre> <p>\u5904\u7406\u5de5\u4f5c\u6d41\u4e2d\u7684\u9519\u8bef\u3002</p>"},{"location":"zh/api-reference/#_14","title":"\ud83d\udcbe \u72b6\u6001\u7ba1\u7406","text":""},{"location":"zh/api-reference/#_15","title":"\ud83d\udccb \u72b6\u6001\u7ed3\u6784","text":"<pre><code>state = {\n    \"data\": \"workflow data\",\n    \"step\": 0,\n    \"results\": [],\n    \"metadata\": {}\n}\n</code></pre>"},{"location":"zh/api-reference/#_16","title":"\ud83d\udd04 \u72b6\u6001\u66f4\u65b0","text":"<pre><code>def update_state(state):\n    # \u4e0d\u53ef\u53d8\u66f4\u65b0\n    new_state = {**state, \"step\": state[\"step\"] + 1}\n    return new_state\n</code></pre>"},{"location":"zh/api-reference/#_17","title":"\ud83c\udfa8 \u53ef\u89c6\u5316","text":""},{"location":"zh/api-reference/#mermaid","title":"\ud83d\udcca Mermaid \u914d\u7f6e","text":"<pre><code>flow.render_mermaid(\n    saved_file=\"workflow.png\",\n    title=\"My Workflow\"\n)\n</code></pre> <p>\u53c2\u6570: - <code>saved_file</code> (str): \u4fdd\u5b58\u6587\u4ef6\u8def\u5f84 - <code>title</code> (str): \u56fe\u8868\u6807\u9898</p>"},{"location":"zh/api-reference/#dot","title":"\ud83d\udd37 DOT \u914d\u7f6e","text":"<pre><code>flow.render_dot(saved_file=\"workflow.dot\")\n</code></pre> <p>\u53c2\u6570: - <code>saved_file</code> (str): \u4fdd\u5b58\u6587\u4ef6\u8def\u5f84</p>"},{"location":"zh/api-reference/#_18","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"zh/api-reference/#_19","title":"\ud83d\udd27 \u52a8\u6001\u8282\u70b9\u7ba1\u7406","text":"<pre><code># \u6dfb\u52a0\u8282\u70b9\nflow += Node(\"new_node\", exec=my_function)\n\n# \u79fb\u9664\u8282\u70b9\nflow -= existing_node\n\n# \u6279\u91cf\u64cd\u4f5c\nflow += [node1, node2, node3]\nflow -= [old_node1, old_node2]\n</code></pre>"},{"location":"zh/api-reference/#_20","title":"\ud83c\udfb2 \u6761\u4ef6\u8fde\u63a5","text":"<pre><code># \u57fa\u4e8e\u6761\u4ef6\u7684\u8fde\u63a5\nif condition:\n    flow = Flow(a &gt;&gt; b)\nelse:\n    flow = Flow(a &gt;&gt; c)\n\n# \u52a8\u6001\u8fde\u63a5\nflow = Flow(a &gt;&gt; (b if condition else c))\n</code></pre>"},{"location":"zh/api-reference/#_21","title":"\ud83d\udee1\ufe0f \u9519\u8bef\u5904\u7406","text":"<pre><code>def robust_function(state):\n    try:\n        # \u53ef\u80fd\u5931\u8d25\u7684\u64cd\u4f5c\n        result = risky_operation()\n        return {\"success\": True, \"result\": result}\n    except Exception as e:\n        return \"error\", {\"error\": str(e), \"step\": \"robust_function\"}\n\ndef error_handler(state):\n    print(f\"Error in {state['step']}: {state['error']}\")\n    return {\"handled\": True}\n</code></pre>"},{"location":"zh/api-reference/#_22","title":"\u26a1 \u6027\u80fd\u4f18\u5316","text":""},{"location":"zh/api-reference/#_23","title":"\ud83d\udd04 \u5f02\u6b65\u6267\u884c","text":"<pre><code># \u4f7f\u7528\u5f02\u6b65\u6267\u884c\u63d0\u9ad8\u6027\u80fd\nasync def async_workflow():\n    flow = Flow(async_node1 &gt;&gt; async_node2 &gt;&gt; async_node3)\n    return await flow.arun(initial_state)\n\n# \u8fd0\u884c\u5f02\u6b65\u5de5\u4f5c\u6d41\nresult = asyncio.run(async_workflow())\n</code></pre>"},{"location":"zh/api-reference/#_24","title":"\ud83d\udd00 \u5e76\u884c\u5904\u7406","text":"<pre><code># \u5e76\u884c\u6267\u884c\u591a\u4e2a\u8282\u70b9\nparallel_nodes = [Node(f\"task_{i}\", exec=task_function) for i in range(5)]\nworkflow = Flow(parallel_nodes &gt;&gt; combine_node)\n</code></pre>"},{"location":"zh/api-reference/#_25","title":"\ud83d\uddc4\ufe0f \u7f13\u5b58\u673a\u5236","text":"<pre><code>def cached_function(state):\n    cache_key = hash(str(state))\n    if cache_key in cache:\n        return cache[cache_key]\n\n    result = expensive_operation(state)\n    cache[cache_key] = result\n    return result\n</code></pre>"},{"location":"zh/api-reference/#_26","title":"\ud83d\udcda \u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/api-reference/#_27","title":"\ud83d\udcbe \u72b6\u6001\u8bbe\u8ba1","text":"<pre><code># \u597d\u7684\u72b6\u6001\u8bbe\u8ba1\nstate = {\n    \"data\": \"actual data\",\n    \"metadata\": {\n        \"created_at\": \"2024-01-01\",\n        \"version\": \"1.0\"\n    },\n    \"results\": [],\n    \"errors\": []\n}\n\n# \u907f\u514d\u5728\u72b6\u6001\u4e2d\u5b58\u50a8\u5927\u91cf\u6570\u636e\n# \u907f\u514d\u5728\u72b6\u6001\u4e2d\u5b58\u50a8\u51fd\u6570\u6216\u590d\u6742\u5bf9\u8c61\n</code></pre>"},{"location":"zh/api-reference/#_28","title":"\ud83d\udee1\ufe0f \u9519\u8bef\u5904\u7406","text":"<pre><code>def safe_function(state):\n    try:\n        return process_safely(state)\n    except ValueError as e:\n        return {\"error\": \"Invalid input\", \"details\": str(e)}\n    except Exception as e:\n        return \"error\", {\"error\": \"Unexpected error\", \"details\": str(e)}\n</code></pre>"},{"location":"zh/api-reference/#_29","title":"\ud83d\udd27 \u8d44\u6e90\u7ba1\u7406","text":"<pre><code>def resource_aware_function(state):\n    # \u68c0\u67e5\u8d44\u6e90\u53ef\u7528\u6027\n    if not check_resources():\n        return \"error\", {\"error\": \"Insufficient resources\"}\n\n    # \u4f7f\u7528\u8d44\u6e90\n    result = use_resources(state)\n\n    # \u6e05\u7406\u8d44\u6e90\n    cleanup_resources()\n\n    return result\n</code></pre>"},{"location":"zh/api-reference/#_30","title":"\ud83d\udd0c \u6269\u5c55\u548c\u81ea\u5b9a\u4e49","text":""},{"location":"zh/api-reference/#_31","title":"\ud83e\udde9 \u81ea\u5b9a\u4e49\u8282\u70b9\u7c7b\u578b","text":"<pre><code>class CustomNode(Node):\n    def __init__(self, name, custom_param, **kwargs):\n        super().__init__(name, **kwargs)\n        self.custom_param = custom_param\n\n    def run(self, state):\n        # \u81ea\u5b9a\u4e49\u903b\u8f91\n        return {\"custom_result\": self.custom_param}\n</code></pre>"},{"location":"zh/api-reference/#_32","title":"\ud83c\udf0a \u81ea\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7c7b\u578b","text":"<pre><code>class CustomFlow(Flow):\n    def __init__(self, name=None, custom_config=None):\n        super().__init__(name=name)\n        self.custom_config = custom_config\n\n    def custom_method(self):\n        # \u81ea\u5b9a\u4e49\u65b9\u6cd5\n        pass\n</code></pre>"},{"location":"zh/api-reference/#_33","title":"\ud83d\udd0c \u63d2\u4ef6\u7cfb\u7edf","text":"<pre><code>def register_plugin(plugin_name, plugin_function):\n    \"\"\"\u6ce8\u518c\u63d2\u4ef6\u51fd\u6570\"\"\"\n    plugins[plugin_name] = plugin_function\n\ndef use_plugin(plugin_name, state):\n    \"\"\"\u4f7f\u7528\u63d2\u4ef6\u51fd\u6570\"\"\"\n    if plugin_name in plugins:\n        return plugins[plugin_name](state)\n    else:\n        raise ValueError(f\"Plugin {plugin_name} not found\")\n</code></pre>"},{"location":"zh/core-concepts/","title":"\ud83e\udde0 \u6838\u5fc3\u6982\u5ff5","text":"<p>\u5b66\u4e60 agnflow \u7684\u57fa\u672c\u6982\u5ff5\u3002</p>"},{"location":"zh/core-concepts/#_2","title":"\ud83d\udd27 \u8282\u70b9\u7c7b\u578b","text":""},{"location":"zh/core-concepts/#_3","title":"\ud83d\udd27 \u57fa\u7840\u8282\u70b9","text":"<p>\u8282\u70b9\u662f\u5de5\u4f5c\u6d41\u7684\u57fa\u672c\u6784\u5efa\u5757\uff1a</p> <pre><code>from agnflow import Node\n\n# \u540c\u6b65\u8282\u70b9\nsync_node = Node(\"sync\", exec=lambda state: {\"result\": \"done\"})\n\n# \u5f02\u6b65\u8282\u70b9\nasync def async_func(state):\n    await asyncio.sleep(1)\n    return {\"result\": \"async done\"}\n\nasync_node = Node(\"async\", aexec=async_func)\n</code></pre>"},{"location":"zh/core-concepts/#_4","title":"\ud83c\udfaf \u7279\u6b8a\u8282\u70b9\u7c7b\u578b","text":""},{"location":"zh/core-concepts/#_5","title":"\ud83c\udf0a \u5de5\u4f5c\u6d41\u8282\u70b9","text":"<p>\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u8282\u70b9\u7684\u5bb9\u5668\u8282\u70b9\uff1a</p> <pre><code>from agnflow import Flow\n\n# \u521b\u5efa\u5de5\u4f5c\u6d41\u5bb9\u5668\nflow = Flow()\nflow[node1, node2, node3]\n\n# \u6216\u8005\u4f7f\u7528\u521d\u59cb\u8282\u70b9\u521b\u5efa\nflow = Flow(node1 &gt;&gt; node2 &gt;&gt; node3)\n</code></pre>"},{"location":"zh/core-concepts/#_6","title":"\ud83e\udd16 \u8702\u7fa4\u8282\u70b9","text":"<p>\u7528\u4e8e\u591a\u667a\u80fd\u4f53\u534f\u8c03\u7684\u7279\u6b8a\u8282\u70b9\uff1a</p> <pre><code>from agnflow import Swarm, Supervisor\n\n# \u8702\u7fa4 - \u6240\u6709\u8282\u70b9\u76f8\u4e92\u8fde\u63a5\nswarm = Swarm[node1, node2, node3]\n\n# \u76d1\u7763\u8005 - \u7b2c\u4e00\u4e2a\u8282\u70b9\u76d1\u7763\u5176\u4ed6\u8282\u70b9\nsupervisor = Supervisor[supervisor_node, worker1, worker2]\n</code></pre>"},{"location":"zh/core-concepts/#_7","title":"\ud83d\udd17 \u8fde\u63a5\u6a21\u5f0f","text":""},{"location":"zh/core-concepts/#_8","title":"\u27a1\ufe0f \u7ebf\u6027\u8fde\u63a5","text":"<pre><code># \u524d\u5411\u94fe\u63a5\na &gt;&gt; b &gt;&gt; c\n\n# \u53cd\u5411\u94fe\u63a5\nc &lt;&lt; b &lt;&lt; a\n</code></pre>"},{"location":"zh/core-concepts/#_9","title":"\ud83d\udd00 \u5206\u652f\u8fde\u63a5","text":"<pre><code># \u5e76\u884c\u5206\u652f\na &gt;&gt; [b, c] &gt;&gt; d\n\n# \u6761\u4ef6\u5206\u652f\na &gt;&gt; (b if condition else c) &gt;&gt; d\n</code></pre>"},{"location":"zh/core-concepts/#_10","title":"\ud83d\udd04 \u5faa\u73af\u8fde\u63a5","text":"<pre><code># \u7b80\u5355\u5faa\u73af\na &gt;&gt; b &gt;&gt; a\n\n# \u6761\u4ef6\u5faa\u73af\na &gt;&gt; b &gt;&gt; (a if not_done else c)\n</code></pre>"},{"location":"zh/core-concepts/#_11","title":"\ud83d\udd04 \u8fd0\u884c\u65f6\u52a8\u6001\u7ba1\u7406","text":""},{"location":"zh/core-concepts/#_12","title":"\u2795 \u6dfb\u52a0\u8282\u70b9","text":"<pre><code># \u6dfb\u52a0\u5355\u4e2a\u8282\u70b9\nflow += new_node\n\n# \u4f7f\u7528\u62ec\u53f7\u8bed\u6cd5\u6dfb\u52a0\nflow[new_node]\n\n# \u6dfb\u52a0\u591a\u4e2a\u8282\u70b9\nflow += [node1, node2, node3]\n</code></pre>"},{"location":"zh/core-concepts/#_13","title":"\u2796 \u79fb\u9664\u8282\u70b9","text":"<pre><code># \u79fb\u9664\u5355\u4e2a\u8282\u70b9\nflow -= old_node\n\n# \u79fb\u9664\u591a\u4e2a\u8282\u70b9\nflow -= [node1, node2]\n</code></pre>"},{"location":"zh/core-concepts/#_14","title":"\ud83d\udd17 \u5bf9\u79f0\u64cd\u4f5c","text":"<pre><code># \u6784\u5efa\u8fde\u63a5\na &gt;&gt; b &gt;&gt; c\na &gt;&gt; [b, c]\n\n# \u5bf9\u79f0\u65ad\u5f00\na - b - c\na - [b, c]\n</code></pre>"},{"location":"zh/core-concepts/#_15","title":"\ud83d\udcbe \u72b6\u6001\u7ba1\u7406","text":""},{"location":"zh/core-concepts/#_16","title":"\ud83c\udf0a \u72b6\u6001\u6d41","text":"<p>\u72b6\u6001\u5728\u8282\u70b9\u95f4\u6d41\u52a8\u5e76\u53ef\u4ee5\u88ab\u4fee\u6539\uff1a</p> <pre><code>def process_node(state):\n    # \u4fee\u6539\u72b6\u6001\n    state[\"processed\"] = True\n    state[\"timestamp\"] = time.time()\n    return state\n\nnode = Node(\"process\", exec=process_node)\n</code></pre>"},{"location":"zh/core-concepts/#_17","title":"\ud83d\udcbe \u72b6\u6001\u6301\u4e45\u5316","text":"<p>\u72b6\u6001\u5728\u8282\u70b9\u95f4\u81ea\u52a8\u4f20\u9012\uff1a</p> <pre><code># \u521d\u59cb\u72b6\u6001\ninitial_state = {\"data\": \"hello\", \"step\": 0}\n\n# \u72b6\u6001\u5728\u8282\u70b9\u95f4\u6d41\u52a8\nnode1 = Node(\"step1\", exec=lambda s: {**s, \"step\": s[\"step\"] + 1})\nnode2 = Node(\"step2\", exec=lambda s: {**s, \"step\": s[\"step\"] + 1})\n\nflow = Flow(node1 &gt;&gt; node2)\nresult = flow.run(initial_state)\n# result: {\"data\": \"hello\", \"step\": 2}\n</code></pre>"},{"location":"zh/core-concepts/#_18","title":"\ud83c\udfae \u6267\u884c\u63a7\u5236","text":""},{"location":"zh/core-concepts/#_19","title":"\ud83d\udeaa \u5165\u53e3\u70b9","text":"<p>\u63a7\u5236\u6267\u884c\u4ece\u54ea\u91cc\u5f00\u59cb\uff1a</p> <pre><code># \u4ece\u7279\u5b9a\u8282\u70b9\u5f00\u59cb\nflow.run(state, entry_action=\"node_name\")\n\n# \u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff08\u9ed8\u8ba4\uff09\nflow.run(state)\n</code></pre>"},{"location":"zh/core-concepts/#_20","title":"\u23f1\ufe0f \u6267\u884c\u9650\u5236","text":"<pre><code># \u9650\u5236\u6267\u884c\u6b65\u6570\nflow.run(state, max_steps=10)\n\n# \u5f02\u6b65\u6267\u884c\u9650\u5236\nawait flow.arun(state, max_steps=10)\n</code></pre>"},{"location":"zh/core-concepts/#_21","title":"\ud83c\udfa8 \u53ef\u89c6\u5316","text":""},{"location":"zh/core-concepts/#mermaid","title":"\ud83d\udcca Mermaid \u6d41\u7a0b\u56fe","text":"<pre><code># \u751f\u6210 Mermaid \u4ee3\u7801\nmermaid = flow.render_mermaid()\n\n# \u4fdd\u5b58\u4e3a\u56fe\u7247\nflow.render_mermaid(saved_file=\"workflow.png\", title=\"My Workflow\")\n</code></pre>"},{"location":"zh/core-concepts/#dot","title":"\ud83d\udd37 DOT \u6d41\u7a0b\u56fe","text":"<pre><code># \u751f\u6210 DOT \u4ee3\u7801\ndot = flow.render_dot()\n\n# \u4fdd\u5b58\u4e3a\u56fe\u7247\nflow.render_dot(saved_file=\"workflow.png\")\n</code></pre>"},{"location":"zh/core-concepts/#_22","title":"\u9ad8\u7ea7\u6a21\u5f0f","text":""},{"location":"zh/core-concepts/#hitl","title":"\u4eba\u673a\u4ea4\u4e92 (HITL)","text":"<pre><code>from agnflow.agent.hitl.cli import human_in_the_loop\n\ndef review_node(state):\n    result, approved = human_in_the_loop(\n        \"\u8bf7\u5ba1\u67e5\u8fd9\u4e9b\u6570\u636e\", \n        input_data=state\n    )\n    if approved:\n        return {\"reviewed\": True, \"result\": result}\n    else:\n        return \"exit\", {\"reviewed\": False}\n\nreview = Node(\"review\", exec=review_node)\n</code></pre>"},{"location":"zh/core-concepts/#_23","title":"\u9519\u8bef\u5904\u7406","text":"<pre><code>def robust_node(state):\n    try:\n        # \u60a8\u7684\u903b\u8f91\n        return {\"success\": True}\n    except Exception as e:\n        return \"error\", {\"error\": str(e)}\n\nnode = Node(\"robust\", exec=robust_node)\n</code></pre>"},{"location":"zh/core-concepts/#_24","title":"\u6761\u4ef6\u6267\u884c","text":"<pre><code>def conditional_node(state):\n    if state.get(\"condition\"):\n        return \"branch_a\"\n    else:\n        return \"branch_b\"\n\nnode = Node(\"conditional\", exec=conditional_node)\n</code></pre>"},{"location":"zh/examples/","title":"\ud83d\udca1 \u793a\u4f8b","text":"<p>\u5c55\u793a agnflow \u529f\u80fd\u7684\u5b9e\u7528\u793a\u4f8b\u3002</p>"},{"location":"zh/examples/#_2","title":"\ud83c\udfaf \u57fa\u7840\u793a\u4f8b","text":""},{"location":"zh/examples/#_3","title":"\ud83d\udcdd \u7b80\u5355\u7ebf\u6027\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow import Node, Flow\n\n# \u5b9a\u4e49\u8282\u70b9\ndef step1(state):\n    return {\"data\": \"processed\", \"step\": 1}\n\ndef step2(state):\n    return {\"data\": state[\"data\"], \"step\": 2, \"final\": True}\n\n# \u521b\u5efa\u8282\u70b9\nnode1 = Node(\"step1\", exec=step1)\nnode2 = Node(\"step2\", exec=step2)\n\n# \u6784\u5efa\u5de5\u4f5c\u6d41\nworkflow = Flow(node1 &gt;&gt; node2)\n\n# \u6267\u884c\nresult = workflow.run({\"initial\": \"data\"})\nprint(result)  # {'data': 'processed', 'step': 2, 'final': True}\n</code></pre>"},{"location":"zh/examples/#_4","title":"\ud83d\udd04 \u5e76\u884c\u5904\u7406","text":"<pre><code>from agnflow import Node, Flow\n\ndef process_a(state):\n    return {\"result_a\": \"A processed\"}\n\ndef process_b(state):\n    return {\"result_b\": \"B processed\"}\n\ndef combine(state):\n    return {\n        **state,\n        \"combined\": f\"{state['result_a']} + {state['result_b']}\"\n    }\n\n# \u521b\u5efa\u5e76\u884c\u5206\u652f\u5de5\u4f5c\u6d41\na = Node(\"process_a\", exec=process_a)\nb = Node(\"process_b\", exec=process_b)\nc = Node(\"combine\", exec=combine)\n\nworkflow = Flow(a &gt;&gt; [b, c] &gt;&gt; c)\nresult = workflow.run({})\n</code></pre>"},{"location":"zh/examples/#_5","title":"\ud83d\ude80 \u9ad8\u7ea7\u793a\u4f8b","text":""},{"location":"zh/examples/#_6","title":"\ud83d\udd27 \u52a8\u6001\u8282\u70b9\u7ba1\u7406","text":"<pre><code>from agnflow import Node, Flow\n\ndef add_data(state):\n    return {\"data\": \"new data\"}\n\ndef process_data(state):\n    return {\"processed\": state[\"data\"]}\n\n# \u521b\u5efa\u521d\u59cb\u5de5\u4f5c\u6d41\nworkflow = Flow()\nworkflow[Node(\"start\", exec=lambda s: {\"step\": \"started\"})]\n\n# \u52a8\u6001\u6dfb\u52a0\u8282\u70b9\nworkflow += Node(\"add\", exec=add_data)\nworkflow += Node(\"process\", exec=process_data)\n\n# \u8fde\u63a5\u8282\u70b9\nworkflow[\"start\"] &gt;&gt; workflow[\"add\"] &gt;&gt; workflow[\"process\"]\n\n# \u6267\u884c\nresult = workflow.run({})\n</code></pre>"},{"location":"zh/examples/#_7","title":"\ud83c\udfb2 \u6761\u4ef6\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow import Node, Flow\n\ndef check_condition(state):\n    if state.get(\"condition\"):\n        return \"branch_a\"\n    else:\n        return \"branch_b\"\n\ndef branch_a(state):\n    return {\"path\": \"A\", \"result\": \"A processed\"}\n\ndef branch_b(state):\n    return {\"path\": \"B\", \"result\": \"B processed\"}\n\ndef finalize(state):\n    return {\"final\": f\"Completed via {state['path']}\"}\n\n# \u521b\u5efa\u6761\u4ef6\u5206\u652f\u5de5\u4f5c\u6d41\ncheck = Node(\"check\", exec=check_condition)\na = Node(\"branch_a\", exec=branch_a)\nb = Node(\"branch_b\", exec=branch_b)\nfinal = Node(\"finalize\", exec=finalize)\n\nworkflow = Flow(check &gt;&gt; (a if True else b) &gt;&gt; final)\nresult = workflow.run({\"condition\": True})\n</code></pre>"},{"location":"zh/examples/#_8","title":"\ud83d\udc65 \u4eba\u5de5\u4ecb\u5165\u5faa\u73af","text":"<pre><code>from agnflow import Node, Flow\nfrom agnflow.agent.hitl.cli import human_in_the_loop\n\ndef generate_content(state):\n    return {\"content\": \"Generated content for review\"}\n\ndef human_review(state):\n    result, approved = human_in_the_loop(\n        \"Please review this content:\",\n        input_data=state[\"content\"],\n        options=[\"approve\", \"reject\", \"modify\"]\n    )\n\n    if approved:\n        return {\"reviewed\": True, \"content\": result}\n    else:\n        return \"exit\", {\"reviewed\": False}\n\ndef publish(state):\n    return {\"published\": True, \"content\": state[\"content\"]}\n\n# \u521b\u5efa HITL \u5de5\u4f5c\u6d41\ngenerate = Node(\"generate\", exec=generate_content)\nreview = Node(\"review\", exec=human_review)\npublish = Node(\"publish\", exec=publish)\n\nworkflow = Flow(generate &gt;&gt; review &gt;&gt; publish)\nresult = workflow.run({})\n</code></pre>"},{"location":"zh/examples/#_9","title":"\ud83e\udd16 \u591a\u667a\u80fd\u4f53\u793a\u4f8b","text":""},{"location":"zh/examples/#_10","title":"\ud83d\udc1d \u8702\u7fa4\u6a21\u5f0f","text":"<pre><code>from agnflow import Node, Swarm\n\ndef agent1(state):\n    return {\"agent1_result\": \"Task 1 completed\"}\n\ndef agent2(state):\n    return {\"agent2_result\": \"Task 2 completed\"}\n\ndef agent3(state):\n    return {\"agent3_result\": \"Task 3 completed\"}\n\n# \u521b\u5efa\u667a\u80fd\u4f53\u8702\u7fa4\nagent1_node = Node(\"agent1\", exec=agent1)\nagent2_node = Node(\"agent2\", exec=agent2)\nagent3_node = Node(\"agent3\", exec=agent3)\n\nswarm = Swarm[agent1_node, agent2_node, agent3_node]\nresult = swarm.run({\"task\": \"collaborative task\"})\n</code></pre>"},{"location":"zh/examples/#_11","title":"\ud83d\udc68\u200d\ud83d\udcbc \u76d1\u7763\u8005\u6a21\u5f0f","text":"<pre><code>from agnflow import Node, Supervisor\n\ndef supervisor(state):\n    # \u76d1\u7763\u8005\u534f\u8c03\u5de5\u4f5c\u8005\n    return {\"supervision\": \"coordinating\", \"tasks\": [\"task1\", \"task2\"]}\n\ndef worker1(state):\n    return {\"worker1_result\": \"Task 1 done\"}\n\ndef worker2(state):\n    return {\"worker2_result\": \"Task 2 done\"}\n\n# \u521b\u5efa\u76d1\u7763\u8005-\u5de5\u4f5c\u8005\u6a21\u5f0f\nsupervisor_node = Node(\"supervisor\", exec=supervisor)\nworker1_node = Node(\"worker1\", exec=worker1)\nworker2_node = Node(\"worker2\", exec=worker2)\n\nsupervisor_flow = Supervisor[supervisor_node, worker1_node, worker2_node]\nresult = supervisor_flow.run({\"project\": \"supervised project\"})\n</code></pre>"},{"location":"zh/examples/#_12","title":"\u26a0\ufe0f \u9519\u8bef\u5904\u7406\u793a\u4f8b","text":""},{"location":"zh/examples/#_13","title":"\ud83d\udee1\ufe0f \u5065\u58ee\u5de5\u4f5c\u6d41","text":"<pre><code>from agnflow import Node, Flow\n\ndef risky_operation(state):\n    try:\n        # \u53ef\u80fd\u5931\u8d25\u7684\u64cd\u4f5c\n        result = 1 / 0\n        return {\"result\": result}\n    except Exception as e:\n        return \"error\", {\"error\": str(e)}\n\ndef error_handler(state):\n    print(f\"Handling error: {state['error']}\")\n    return {\"handled\": True, \"error\": state[\"error\"]}\n\ndef success_handler(state):\n    return {\"success\": True, \"result\": state[\"result\"]}\n\n# \u521b\u5efa\u9519\u8bef\u5904\u7406\u5de5\u4f5c\u6d41\nrisky = Node(\"risky\", exec=risky_operation)\nerror = Node(\"error\", exec=error_handler)\nsuccess = Node(\"success\", exec=success_handler)\n\nworkflow = Flow(risky &gt;&gt; (error if \"error\" in state else success))\nresult = workflow.run({})\n</code></pre>"},{"location":"zh/examples/#_14","title":"\ud83d\udd04 \u91cd\u8bd5\u673a\u5236","text":"<pre><code>from agnflow import Node, Flow\nimport time\n\ndef retry_operation(state, max_retries=3):\n    retries = state.get(\"retries\", 0)\n\n    if retries &gt;= max_retries:\n        return \"error\", {\"error\": \"Max retries exceeded\"}\n\n    try:\n        # \u6a21\u62df\u53ef\u80fd\u5931\u8d25\u7684\u64cd\u4f5c\n        if time.time() % 2 &lt; 1:  # 50% \u5931\u8d25\u7387\n            raise Exception(\"Random failure\")\n\n        return {\"success\": True, \"attempts\": retries + 1}\n    except Exception as e:\n        return {\n            \"retries\": retries + 1,\n            \"last_error\": str(e)\n        }\n\ndef retry_node(state):\n    return retry_operation(state)\n\n# \u521b\u5efa\u91cd\u8bd5\u5de5\u4f5c\u6d41\nretry = Node(\"retry\", exec=retry_node)\nworkflow = Flow(retry &gt;&gt; retry)  # \u81ea\u5faa\u73af\u91cd\u8bd5\n\nresult = workflow.run({\"retries\": 0})\n</code></pre>"},{"location":"zh/examples/#_15","title":"\u26a1 \u5f02\u6b65\u793a\u4f8b","text":""},{"location":"zh/examples/#_16","title":"\ud83d\udd04 \u5f02\u6b65\u8282\u70b9","text":"<pre><code>import asyncio\nfrom agnflow import Node, Flow\n\nasync def async_operation(state):\n    await asyncio.sleep(1)\n    return {\"async_result\": \"completed\"}\n\nasync def async_combine(state):\n    await asyncio.sleep(0.5)\n    return {\"combined\": f\"Async: {state['async_result']}\"}\n\n# \u521b\u5efa\u5f02\u6b65\u5de5\u4f5c\u6d41\nasync_node = Node(\"async_op\", aexec=async_operation)\nasync_combine_node = Node(\"async_combine\", aexec=async_combine)\n\nworkflow = Flow(async_node &gt;&gt; async_combine_node)\n\n# \u5f02\u6b65\u6267\u884c\nresult = asyncio.run(workflow.arun({}))\n</code></pre>"},{"location":"zh/examples/#_17","title":"\ud83d\udd00 \u6df7\u5408\u540c\u6b65\u5f02\u6b65","text":"<pre><code>import asyncio\nfrom agnflow import Node, Flow\n\ndef sync_operation(state):\n    return {\"sync_data\": \"processed\"}\n\nasync def async_operation(state):\n    await asyncio.sleep(1)\n    return {\"async_data\": \"processed\"}\n\ndef combine_results(state):\n    return {\n        \"combined\": f\"{state['sync_data']} + {state['async_data']}\"\n    }\n\n# \u521b\u5efa\u6df7\u5408\u5de5\u4f5c\u6d41\nsync_node = Node(\"sync\", exec=sync_operation)\nasync_node = Node(\"async\", aexec=async_operation)\ncombine_node = Node(\"combine\", exec=combine_results)\n\nworkflow = Flow(sync_node &gt;&gt; async_node &gt;&gt; combine_node)\nresult = asyncio.run(workflow.arun({}))\n</code></pre>"},{"location":"zh/examples/#_18","title":"\ud83c\udfa8 \u53ef\u89c6\u5316\u793a\u4f8b","text":""},{"location":"zh/examples/#_19","title":"\ud83d\udcca \u751f\u6210\u6d41\u7a0b\u56fe","text":"<pre><code>from agnflow import Node, Flow\n\ndef step1(state):\n    return {\"step\": 1}\n\ndef step2(state):\n    return {\"step\": 2}\n\ndef step3(state):\n    return {\"step\": 3}\n\n# \u521b\u5efa\u590d\u6742\u5de5\u4f5c\u6d41\na = Node(\"step1\", exec=step1)\nb = Node(\"step2\", exec=step2)\nc = Node(\"step3\", exec=step3)\n\nworkflow = Flow(a &gt;&gt; [b, c] &gt;&gt; b)\n\n# \u751f\u6210 Mermaid \u56fe\u8868\nworkflow.render_mermaid(saved_file=\"workflow.png\", title=\"\u590d\u6742\u5de5\u4f5c\u6d41\")\n\n# \u751f\u6210 DOT \u56fe\u8868\nworkflow.render_dot(saved_file=\"workflow.dot\")\n</code></pre>"},{"location":"zh/examples/#_20","title":"\ud83d\udcbe \u72b6\u6001\u7ba1\u7406\u793a\u4f8b","text":""},{"location":"zh/examples/#_21","title":"\ud83d\udd22 \u590d\u6742\u72b6\u6001\u64cd\u4f5c","text":"<pre><code>from agnflow import Node, Flow\n\ndef initialize_state(state):\n    return {\n        **state,\n        \"counter\": 0,\n        \"history\": [],\n        \"metadata\": {\"created\": \"now\"}\n    }\n\ndef increment_counter(state):\n    new_counter = state[\"counter\"] + 1\n    new_history = state[\"history\"] + [new_counter]\n\n    return {\n        **state,\n        \"counter\": new_counter,\n        \"history\": new_history\n    }\n\ndef analyze_history(state):\n    history = state[\"history\"]\n    return {\n        **state,\n        \"analysis\": {\n            \"total\": len(history),\n            \"sum\": sum(history),\n            \"average\": sum(history) / len(history) if history else 0\n        }\n    }\n\n# \u521b\u5efa\u72b6\u6001\u7ba1\u7406\u5de5\u4f5c\u6d41\ninit = Node(\"init\", exec=initialize_state)\nincrement = Node(\"increment\", exec=increment_counter)\nanalyze = Node(\"analyze\", exec=analyze_history)\n\nworkflow = Flow(init &gt;&gt; increment &gt;&gt; increment &gt;&gt; increment &gt;&gt; analyze)\nresult = workflow.run({})\n</code></pre>"},{"location":"zh/examples/#_22","title":"\ud83d\udcbe \u72b6\u6001\u6301\u4e45\u5316","text":"<pre><code>import json\nfrom agnflow import Node, Flow\n\ndef save_state(state):\n    with open(\"workflow_state.json\", \"w\") as f:\n        json.dump(state, f)\n    return state\n\ndef load_state(state):\n    try:\n        with open(\"workflow_state.json\", \"r\") as f:\n            loaded_state = json.load(f)\n        return {**state, **loaded_state}\n    except FileNotFoundError:\n        return state\n\ndef process_with_persistence(state):\n    return {\"processed\": True, \"data\": state.get(\"data\", \"default\")}\n\n# \u521b\u5efa\u6301\u4e45\u5316\u5de5\u4f5c\u6d41\nload = Node(\"load\", exec=load_state)\nprocess = Node(\"process\", exec=process_with_persistence)\nsave = Node(\"save\", exec=save_state)\n\nworkflow = Flow(load &gt;&gt; process &gt;&gt; save)\nresult = workflow.run({\"data\": \"important data\"})\n</code></pre>"},{"location":"zh/examples/#_23","title":"\u26a1 \u6027\u80fd\u4f18\u5316\u793a\u4f8b","text":""},{"location":"zh/examples/#_24","title":"\ud83d\uddc4\ufe0f \u7f13\u5b58\u673a\u5236","text":"<pre><code>from agnflow import Node, Flow\nimport hashlib\nimport json\n\nclass Cache:\n    def __init__(self):\n        self._cache = {}\n\n    def get(self, key):\n        return self._cache.get(key)\n\n    def set(self, key, value):\n        self._cache[key] = value\n\ncache = Cache()\n\ndef expensive_operation(state):\n    # \u751f\u6210\u7f13\u5b58\u952e\n    cache_key = hashlib.md5(\n        json.dumps(state, sort_keys=True).encode()\n    ).hexdigest()\n\n    # \u68c0\u67e5\u7f13\u5b58\n    cached_result = cache.get(cache_key)\n    if cached_result:\n        return {\"result\": cached_result, \"cached\": True}\n\n    # \u6267\u884c\u6602\u8d35\u64cd\u4f5c\n    result = sum(i**2 for i in range(10000))\n\n    # \u7f13\u5b58\u7ed3\u679c\n    cache.set(cache_key, result)\n\n    return {\"result\": result, \"cached\": False}\n\n# \u521b\u5efa\u7f13\u5b58\u5de5\u4f5c\u6d41\nexpensive = Node(\"expensive\", exec=expensive_operation)\nworkflow = Flow(expensive)\n\n# \u7b2c\u4e00\u6b21\u6267\u884c\uff08\u65e0\u7f13\u5b58\uff09\nresult1 = workflow.run({\"input\": \"data1\"})\n\n# \u7b2c\u4e8c\u6b21\u6267\u884c\uff08\u6709\u7f13\u5b58\uff09\nresult2 = workflow.run({\"input\": \"data1\"})\n</code></pre>"},{"location":"zh/examples/#_25","title":"\ud83d\udd04 \u5e76\u884c\u4f18\u5316","text":"<pre><code>from agnflow import Node, Flow\nimport asyncio\n\nasync def parallel_task1(state):\n    await asyncio.sleep(2)\n    return {\"task1\": \"completed\"}\n\nasync def parallel_task2(state):\n    await asyncio.sleep(3)\n    return {\"task2\": \"completed\"}\n\nasync def parallel_task3(state):\n    await asyncio.sleep(1)\n    return {\"task3\": \"completed\"}\n\ndef combine_parallel_results(state):\n    return {\n        \"all_tasks\": [\n            state.get(\"task1\"),\n            state.get(\"task2\"),\n            state.get(\"task3\")\n        ]\n    }\n\n# \u521b\u5efa\u5e76\u884c\u4f18\u5316\u5de5\u4f5c\u6d41\ntask1 = Node(\"task1\", aexec=parallel_task1)\ntask2 = Node(\"task2\", aexec=parallel_task2)\ntask3 = Node(\"task3\", aexec=parallel_task3)\ncombine = Node(\"combine\", exec=combine_parallel_results)\n\n# \u5e76\u884c\u6267\u884c\u6240\u6709\u4efb\u52a1\nworkflow = Flow([task1, task2, task3] &gt;&gt; combine)\nresult = asyncio.run(workflow.arun({}))\n</code></pre>"},{"location":"zh/getting-started/","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":"<p>\u51e0\u5206\u949f\u5185\u4e0a\u624b agnflow\u3002</p>"},{"location":"zh/getting-started/#_2","title":"\ud83d\udce6 \u5b89\u88c5","text":"<pre><code>pip install agnflow\n</code></pre>"},{"location":"zh/getting-started/#_3","title":"\ud83c\udfaf \u57fa\u672c\u4f7f\u7528","text":""},{"location":"zh/getting-started/#1","title":"1\ufe0f\u20e3 \u5bfc\u5165\u548c\u521b\u5efa\u8282\u70b9","text":"<pre><code>from agnflow import Node, Flow\n\n# \u521b\u5efa\u540c\u6b65\u8282\u70b9\ngreet = Node(\"Greet\", exec=lambda state: {\"message\": \"Hello, World!\"})\n\n# \u521b\u5efa\u5f02\u6b65\u8282\u70b9\nasync def async_respond(state):\n    await asyncio.sleep(1)\n    print(state[\"message\"])\n    return {\"status\": \"done\"}\n\nrespond = Node(\"Respond\", aexec=async_respond)\n</code></pre>"},{"location":"zh/getting-started/#2","title":"2\ufe0f\u20e3 \u8fde\u63a5\u8282\u70b9","text":"<pre><code># \u7ebf\u6027\u8fde\u63a5\nflow = Flow(greet &gt;&gt; respond)\n\n# \u6216\u8005\u9010\u6b65\u8fde\u63a5\nflow = Flow()\nflow.add_node(greet)\nflow.add_node(respond)\ngreet &gt;&gt; respond\n</code></pre>"},{"location":"zh/getting-started/#3","title":"3\ufe0f\u20e3 \u8fd0\u884c\u5de5\u4f5c\u6d41","text":"<pre><code># \u540c\u6b65\u6267\u884c\nstate = {\"data\": \"hello\"}\nresult = flow.run(state)\n\n# \u5f02\u6b65\u6267\u884c\nimport asyncio\nresult = asyncio.run(flow.arun(state))\n</code></pre>"},{"location":"zh/getting-started/#_4","title":"\ud83e\udde0 \u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/getting-started/#_5","title":"\ud83d\udd27 \u8282\u70b9","text":"<p>\u8282\u70b9\u662f\u5de5\u4f5c\u6d41\u7684\u6784\u5efa\u5757\u3002\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\uff1a</p> <ul> <li>\u6267\u884c\u540c\u6b65\u6216\u5f02\u6b65\u51fd\u6570</li> <li>\u5904\u7406\u548c\u4fee\u6539\u72b6\u6001</li> <li>\u8fd4\u56de\u5f71\u54cd\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u7ed3\u679c</li> </ul> <pre><code># \u540c\u6b65\u8282\u70b9\nnode = Node(\"name\", exec=lambda state: {\"key\": \"value\"})\n\n# \u5f02\u6b65\u8282\u70b9\nnode = Node(\"name\", aexec=async_function)\n\n# \u5e26\u81ea\u5b9a\u4e49\u540d\u79f0\u7684\u8282\u70b9\nnode = Node(\"custom_name\", exec=function)\n</code></pre>"},{"location":"zh/getting-started/#_6","title":"\ud83d\udd17 \u8fde\u63a5","text":"<p>\u4f7f\u7528 <code>&gt;&gt;</code> \u64cd\u4f5c\u7b26\u8fde\u63a5\u8282\u70b9\uff1a</p> <pre><code># \u7ebf\u6027\u8fde\u63a5\na &gt;&gt; b &gt;&gt; c\n\n# \u5206\u652f\na &gt;&gt; [b, c] &gt;&gt; d\n\n# \u53cd\u5411\u8fde\u63a5\nc &lt;&lt; b &lt;&lt; a\n</code></pre>"},{"location":"zh/getting-started/#_7","title":"\ud83c\udf0a \u5de5\u4f5c\u6d41","text":"<p>\u5de5\u4f5c\u6d41\u662f\u7ba1\u7406\u8282\u70b9\u53ca\u5176\u8fde\u63a5\u7684\u5bb9\u5668\uff1a</p> <pre><code># \u4f7f\u7528\u8282\u70b9\u521b\u5efa\u5de5\u4f5c\u6d41\nflow = Flow(node1 &gt;&gt; node2 &gt;&gt; node3)\n\n# \u5411\u73b0\u6709\u5de5\u4f5c\u6d41\u6dfb\u52a0\u8282\u70b9\nflow += new_node\nflow[another_node]\n\n# \u79fb\u9664\u8282\u70b9\nflow -= node_to_remove\n</code></pre>"},{"location":"zh/getting-started/#_8","title":"\ud83d\ude80 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"zh/getting-started/#_9","title":"\ud83d\udd04 \u8fd0\u884c\u65f6\u8282\u70b9\u7ba1\u7406","text":"<p>\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\uff1a</p> <pre><code># \u6dfb\u52a0\u8282\u70b9\nflow += new_node\nflow[another_node]\nflow += [node1, node2, node3]\n\n# \u5220\u9664\u8282\u70b9\nflow -= old_node\nflow -= [node1, node2]\n</code></pre>"},{"location":"zh/getting-started/#_10","title":"\ud83d\udd17 \u5bf9\u79f0\u8fde\u63a5/\u65ad\u5f00","text":"<pre><code># \u6784\u5efa\u8fde\u63a5\na &gt;&gt; b &gt;&gt; c\na &gt;&gt; [b, c]\n\n# \u5bf9\u79f0\u65ad\u5f00\na - b - c\na - [b, c]\n</code></pre>"},{"location":"zh/getting-started/#_11","title":"\ud83c\udfa8 \u53ef\u89c6\u5316\u6d41\u7a0b\u56fe","text":"<p>\u751f\u6210\u7cbe\u7f8e\u7684\u6d41\u7a0b\u56fe\uff1a</p> <pre><code># \u751f\u6210 Mermaid \u683c\u5f0f\nmermaid_code = flow.render_mermaid()\n\n# \u4fdd\u5b58\u4e3a\u56fe\u7247\nflow.render_mermaid(saved_file=\"workflow.png\")\n\n# \u751f\u6210 DOT \u683c\u5f0f\ndot_code = flow.render_dot()\n</code></pre>"},{"location":"zh/getting-started/#_12","title":"\ud83d\udcda \u4e0b\u4e00\u6b65","text":"<ul> <li>\ud83e\udde0 \u6838\u5fc3\u6982\u5ff5 - \u5b66\u4e60\u9ad8\u7ea7\u529f\u80fd</li> <li>\ud83d\udd27 API \u53c2\u8003 - \u5b8c\u6574 API \u6587\u6863</li> <li>\ud83d\udca1 \u793a\u4f8b - \u67e5\u770b\u66f4\u591a\u793a\u4f8b </li> </ul>"}]}